/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 4.1
 * Copyright (C) 2003-2013 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

using System;
using System.Text;
using System.Collections.Generic;

namespace de.unika.ipd.grGen.libGr
{
    /// <summary>
    /// An object representing a filter call.
    /// It specifies the filter and potential arguments.
    /// </summary>
    public class FilterCall
    {
        /// <summary>
        /// The name of the filter.
        /// </summary>
        public String Name;

        /// <summary>
        /// The entity the filter is based on, in case of a def-variable based auto-generated filter, otherwise null.
        /// </summary>
        public String Entity;

        /// <summary>
        /// The argument for an auto-supplied filter, otherwise null.
        /// </summary>
        public object Argument;

        /// <summary>
        /// Instantiates a new FilterCall object for a filter function or auto
        /// </summary>
        public FilterCall(String name)
        {
            Name = name;
        }

        /// <summary>
        /// Instantiates a new FilterCall object for an auto-generated filter
        /// </summary>
        public FilterCall(String name, String entity)
            : this(name)
        {
            Entity = entity;
        }

        /// <summary>
        /// Instantiates a new FilterCall object for an auto-supplied filter (with int parameter)
        /// </summary>
        public FilterCall(String name, int argument)
            : this(name)
        {
            Argument = argument;
        }

        /// <summary>
        /// Instantiates a new FilterCall object for an auto-supplied filter (with double parameter)
        /// </summary>
        public FilterCall(String name, double argument)
            : this(name)
        {
            Argument = argument;
        }

        public bool SameFilterCall(FilterCall that)
        {
            if(Name != that.Name)
                return false;
            if(Entity != that.Entity)
                return false;
            if(Argument != that.Argument)
                return false;
            return true;
        }

        public bool IsAutoGenerated
        {
            get
            {
                if(Entity != null)
                    return true;
                if(Name == "auto")
                    return true;
                return false;
            }
        }

        public bool IsAutoSupplied
        {
            get
            {
                if(Argument == null)
                    return false;
                else
                    return true;
            }
        }

        public string FullName
        {
            get
            {
                if(Entity != null)
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append(Name);
                    sb.Append("<");
                    sb.Append(Entity);
                    sb.Append(">");
                    return sb.ToString();
                }
                else
                    return Name;
            }
        }

        public bool IsContainedIn(List<IFilter> filters)
        {
            return IsContainedIn(filters.ToArray());
        }

        public bool IsContainedIn(IFilter[] filters)
        {
            for(int i = 0; i < filters.Length; ++i)
            {
                if(filters[i] is IFilterAutoGenerated)
                {
                    IFilterAutoGenerated filter = (IFilterAutoGenerated)filters[i];
                    if(filter.Name == Name)
                    {
                        if(Name == "auto")
                            return true;
                        else if(filter.Entity == Entity)
                            return true;
                    }
                }
                else //if(filters[i] is IFilterFunction)
                {
                    IFilterFunction filter = (IFilterFunction)filters[i];
                    if(filter.Name == Name)
                        return true;
                }
            }
            return false;
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(Name);
            if(Entity != null)
            {
                sb.Append("<");
                sb.Append(Entity);
                sb.Append(">");
            }
            if(Argument != null)
            {
                sb.Append("(");
                if(Argument is Double)
                    sb.Append(((double)Argument).ToString(System.Globalization.CultureInfo.InvariantCulture));
                else
                    sb.Append(Argument.ToString());
                sb.Append(")");
            }
            return sb.ToString();
        }
    }
}
