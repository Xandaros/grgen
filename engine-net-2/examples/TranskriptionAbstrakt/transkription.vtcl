import beispiel.metamodel;

machine example
{
	rule main() = seq {
		//log(info, "Transkription started");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		forall D below beispiel.models with find transcription(D) do skip; //print("start " + name(D) + "\n");
		//log(info, "Transkription finished");
	}

	pattern transcription(D1) =
	{
		// start transcription at TATABox: TATAAA.
		D(D1);
		Node.Edge(E1, D1, T1);
		T(T1);

		S.PG(PG1, D1, D2);

		D(D2);
		Node.Edge(E2, D2, A2);
		A(A2);
		
		S.PG(PG2, D2, D3);
		
		D(D3);
		Node.Edge(E3, D3, T3);
		T(T3);
		
		S.PG(PG3, D3, D4);
		
		D(D4);
		Node.Edge(E4, D4, A4);
		A(A4);
		
		S.PG(PG4, D4, D5);
		
		D(D5);
		Node.Edge(E5, D5, A5);
		A(A5);
		
		S.PG(PG5, D5, D6);
		
		D(D6);
		Node.Edge(E6, D6, A6);
		A(A6);
		
		find dnaChain(D6);
	}

	pattern dnaChain(Prev) =
	{
		//End
		D(Prev);
		
		find terminationSequence(Prev);	
	}
	or
	{
		//Chain 
		neg find terminationSequence(Prev);
		
		D(Prev);
		S.PG(PG, Prev, Next);
		D(Next);
		find nucleotide(Next);
		find dnaChain(Next);
	}
		
	pattern nucleotide(Sugar) =
	{
		//A
		D(Sugar);
		Node.Edge(E, Sugar, A);
		A(A);
	}
	or
	{
		//C
		D(Sugar);
		Node.Edge(E, Sugar, C);
		C(C);
	}
	or
	{
		//G
		D(Sugar);
		Node.Edge(E, Sugar, G);
		G(G);
	}
	or
	{
		//T 
		D(Sugar);
		Node.Edge(E, Sugar, T);
		T(T);
	}

	pattern terminationSequence(Prev) =
	{
		// CCCACT
		D(Prev);
		
		S.PG(PG1, Prev, D1);
		
		D(D1);
		Node.Edge(E1, D1, C1);		
		C(C1);
		
		S.PG(PG2, D1, D2);
		
		D(D2);
		Node.Edge(E2, D2, C2);		
		C(C2);
		
		S.PG(PG3, D2, D3);
		
		D(D3);
		Node.Edge(E3, D3, C3);
		C(C3);
		
		S.PG(PG4, D3, D4);
		
		D(D4);
		Node.Edge(E4, D4, A4);
		A(A4);
		
		S.PG(PG5, D4, D5);
		
		D(D5);
		Node.Edge(E5, D5, C5);		
		C(C5);
		
		S.PG(PG6, D5, D6);
		
		D(D6);
		Node.Edge(E6, D6, T6);
		T(T6);
		
		// ......
		S.PG(PG7, D6, D7);
		
		D(D7);
		Node.Edge(E7, D7, N7);		
		N(N7);
		
		S.PG(PG8, D7, D8);
		
		D(D8);
		Node.Edge(E8, D8, N8);		
		N(N8);
		
		S.PG(PG9, D8, D9);
		
		D(D9);
		Node.Edge(E9, D9, N9);
		N(N9);
		
		S.PG(PG10, D9, D10);
		
		D(D10);
		Node.Edge(E10, D10, N10);
		N(N10);
		
		S.PG(PG11, D10, D11);
		
		D(D11);
		Node.Edge(E11, D11, N11);		
		N(N11);
		
		S.PG(PG12, D11, D12);
		
		D(D12);
		Node.Edge(E12, D12, N12);
		N(N12);
		
		// AGTGGG = inverse and mirrored CCCACT
		S.PG(PG13, D12, D13);
		
		D(D13);
		Node.Edge(E13, D13, A13);		
		A(A13);
		
		S.PG(PG14, D13, D14);
		
		D(D14);
		Node.Edge(E14, D14, G14);		
		G(G14);
		
		S.PG(PG15, D14, D15);
		
		D(D15);
		Node.Edge(E15, D15, T15);
		T(T15);
		
		S.PG(PG16, D15, D16);
		
		D(D16);
		Node.Edge(E16, D16, G16);
		G(G16);
		
		S.PG(PG17, D16, D17);
		
		D(D17);
		Node.Edge(E17, D17, G17);		
		G(G17);
		
		S.PG(PG18, D17, D18);
		
		D(D18);
		Node.Edge(E18, D18, G18);
		G(G18);
				
		// AAAAAA
		S.PG(PG19, D18, D19);
		
		D(D19);
		Node.Edge(E19, D19, A19);		
		A(A19);
		
		S.PG(PG20, D19, D20);
		
		D(D20);
		Node.Edge(E20, D20, A20);		
		A(A20);
		
		S.PG(PG21, D20, D21);
		
		D(D21);
		Node.Edge(E21, D21, A21);
		A(A21);
		
		S.PG(PG22, D21, D22);
		
		D(D22);
		Node.Edge(E22, D22, A22);
		A(A22);
		
		S.PG(PG23, D22, D23);
		
		D(D23);
		Node.Edge(E23, D23, A23);		
		A(A23);
		
		S.PG(PG24, D23, D24);
		
		D(D24);
		Node.Edge(E24, D24, A24);
		A(A24);
	}			
}
