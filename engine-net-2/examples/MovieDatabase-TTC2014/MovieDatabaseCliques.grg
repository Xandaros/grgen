rule findCliquesOf3
{
	pn1:Person; pn2:Person; pn3:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie; pn2 -:personToMovie-> m1; pn3 -:personToMovie-> m1;
		pn1 -:personToMovie-> m2:Movie; pn2 -:personToMovie-> m2; pn3 -:personToMovie-> m2;
		pn1 -:personToMovie-> m3:Movie; pn2 -:personToMovie-> m3; pn3 -:personToMovie-> m3;
	}
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;

		exec(addCommonMoviesAndComputeAverageRankingOfClique3(c, pn1, pn2, pn3));
	}
} \ auto

rule addCommonMoviesAndComputeAverageRankingOfClique3(c:Clique, pn1:Person, pn2:Person, pn3:Person)
{
	iterated it {
		pn1 -:personToMovie-> m:Movie;
		pn2 -:personToMovie-> m;
		pn3 -:personToMovie-> m;
		
		modify {
			c -:commonMovies-> m;
			
			eval {
				yield sum = sum + m.rating;
			}
		}
	}	
	
	modify {
		def var sum:double = 0.0;
		
		eval {
			c.avgRating = sum / count(it);
		}
	}
}

rule findCliquesOf4
{
	pn1:Person; pn2:Person; pn3:Person; pn4:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie; pn2 -:personToMovie-> m1; pn3 -:personToMovie-> m1; pn4 -:personToMovie-> m1;
		pn1 -:personToMovie-> m2:Movie; pn2 -:personToMovie-> m2; pn3 -:personToMovie-> m2; pn4 -:personToMovie-> m2;
		pn1 -:personToMovie-> m3:Movie; pn2 -:personToMovie-> m3; pn3 -:personToMovie-> m3; pn4 -:personToMovie-> m3;
		pn1 -:personToMovie-> m4:Movie; pn2 -:personToMovie-> m4; pn3 -:personToMovie-> m4; pn4 -:personToMovie-> m4;
	}
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;
		c -:persons-> pn4;

		exec(addCommonMoviesAndComputeAverageRankingOfClique4(c, pn1, pn2, pn3, pn4));
	}
} \ auto

rule addCommonMoviesAndComputeAverageRankingOfClique4(c:Clique, pn1:Person, pn2:Person, pn3:Person, pn4:Person)
{
	iterated it {
		pn1 -:personToMovie-> m:Movie;
		pn2 -:personToMovie-> m;
		pn3 -:personToMovie-> m;
		pn4 -:personToMovie-> m;
		
		modify {
			c -:commonMovies-> m;
			
			eval {
				yield sum = sum + m.rating;
			}
		}
	}	
	
	modify {
		def var sum:double = 0.0;
		
		eval {
			c.avgRating = sum / count(it);
		}
	}
}

rule findCliquesOf5
{
	pn1:Person; pn2:Person; pn3:Person; pn4:Person; pn5:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie; pn2 -:personToMovie-> m1; pn3 -:personToMovie-> m1; pn4 -:personToMovie-> m1; pn5 -:personToMovie-> m1;
		pn1 -:personToMovie-> m2:Movie; pn2 -:personToMovie-> m2; pn3 -:personToMovie-> m2; pn4 -:personToMovie-> m2; pn5 -:personToMovie-> m2;
		pn1 -:personToMovie-> m3:Movie; pn2 -:personToMovie-> m3; pn3 -:personToMovie-> m3; pn4 -:personToMovie-> m3; pn5 -:personToMovie-> m3;
		pn1 -:personToMovie-> m4:Movie; pn2 -:personToMovie-> m4; pn3 -:personToMovie-> m4; pn4 -:personToMovie-> m4; pn5 -:personToMovie-> m4;
		pn1 -:personToMovie-> m5:Movie; pn2 -:personToMovie-> m5; pn3 -:personToMovie-> m5; pn4 -:personToMovie-> m5; pn5 -:personToMovie-> m5;
	}
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;
		c -:persons-> pn4;
		c -:persons-> pn5;

		exec(addCommonMoviesAndComputeAverageRankingOfClique5(c, pn1, pn2, pn3, pn4, pn5));
	}
} \ auto

rule addCommonMoviesAndComputeAverageRankingOfClique5(c:Clique, pn1:Person, pn2:Person, pn3:Person, pn4:Person, pn5:Person)
{
	iterated it {
		pn1 -:personToMovie-> m:Movie;
		pn2 -:personToMovie-> m;
		pn3 -:personToMovie-> m;
		pn4 -:personToMovie-> m;
		pn5 -:personToMovie-> m;
		
		modify {
			c -:commonMovies-> m;
			
			eval {
				yield sum = sum + m.rating;
			}
		}
	}	
	
	modify {
		def var sum:double = 0.0;
		
		eval {
			c.avgRating = sum / count(it);
		}
	}
}

rule findCliquesOf3Opt[parallelize=64]
{
	pn1:Person; pn2:Person; pn3:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie; pn2 -:personToMovie-> m1; pn3 -:personToMovie-> m1;
		if{ atLeastThreeCommonMoviesOf3(pn1, pn2, pn3); }
	}
	if{ uniqueof(pn1) < uniqueof(pn2) && uniqueof(pn2) < uniqueof(pn3); }
	if{ atLeastThreeMovies(pn1); }
	if{ atLeastThreeMovies(pn2); }
	if{ atLeastThreeMovies(pn3); }
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;

		exec([addCommonMoviesOf3(c, pn1, pn2, pn3)]);
	}
}

rule addCommonMoviesOf3(c:Clique, pn1:Person, pn2:Person, pn3:Person)
{
	pn1 -:personToMovie-> m:Movie;
	pn2 -:personToMovie-> m;
	pn3 -:personToMovie-> m;

	modify {
		c -:commonMovies-> m;
	}
}

rule findCliqueOf4Opt[parallelize=64]
{
	pn1:Person; pn2:Person; pn3:Person; pn4:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie; pn2 -:personToMovie-> m1; pn3 -:personToMovie-> m1; pn4 -:personToMovie-> m1;
		if{ atLeastThreeCommonMoviesOf4(pn1, pn2, pn3, pn4); }
	}
	if{ uniqueof(pn1) < uniqueof(pn2) && uniqueof(pn2) < uniqueof(pn3) && uniqueof(pn3) < uniqueof(pn4); }
	if{ atLeastThreeMovies(pn1); }
	if{ atLeastThreeMovies(pn2); }
	if{ atLeastThreeMovies(pn3); }
	if{ atLeastThreeMovies(pn4); }
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;
		c -:persons-> pn4;

		exec([addCommonMoviesOf4(c, pn1, pn2, pn3, pn4)]);
	}
}

rule addCommonMoviesOf4(c:Clique, pn1:Person, pn2:Person, pn3:Person, pn4:Person)
{
	pn1 -:personToMovie-> m:Movie;
	pn2 -:personToMovie-> m;
	pn3 -:personToMovie-> m;
	pn4 -:personToMovie-> m;

	modify {
		c -:commonMovies-> m;
	}
}

rule findCliqueOf5Opt[parallelize=64]
{
	pn1:Person; pn2:Person; pn3:Person; pn4:Person; pn5:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie; pn2 -:personToMovie-> m1; pn3 -:personToMovie-> m1; pn4 -:personToMovie-> m1; pn5 -:personToMovie-> m1;
		if{ atLeastThreeCommonMoviesOf5(pn1, pn2, pn3, pn4, pn5); }
	}
	if{ uniqueof(pn1) < uniqueof(pn2) && uniqueof(pn2) < uniqueof(pn3) && uniqueof(pn3) < uniqueof(pn4) && uniqueof(pn4) < uniqueof(pn5); }
	if{ atLeastThreeMovies(pn1); }
	if{ atLeastThreeMovies(pn2); }
	if{ atLeastThreeMovies(pn3); }
	if{ atLeastThreeMovies(pn4); }
	if{ atLeastThreeMovies(pn5); }
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;
		c -:persons-> pn4;
		c -:persons-> pn5;

		exec([addCommonMoviesOf5(c, pn1, pn2, pn3, pn4, pn5)]);
	}
}

rule addCommonMoviesOf5(c:Clique, pn1:Person, pn2:Person, pn3:Person, pn4:Person, pn5:Person)
{
	pn1 -:personToMovie-> m:Movie;
	pn2 -:personToMovie-> m;
	pn3 -:personToMovie-> m;
	pn4 -:personToMovie-> m;
	pn5 -:personToMovie-> m;

	modify {
		c -:commonMovies-> m;
	}
}

rule computeAverageRankingCliques
{
	c:Clique;
	iterated it {
		c -:commonMovies-> m:Movie;
		
		modify {
			eval {
				yield sum = sum + m.rating;
			}
		}
	}
	
	modify {
		def var sum:double = 0.0;

		eval {
			c.avgRating = sum / count(it);
		}
	}
}

function atLeastThreeCommonMoviesOf3(pn1:Person, pn2:Person, pn3:Person) : boolean
{
	def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
	movies = movies & adjacentOutgoing(pn2, personToMovie);
	if(movies.size() < 3) {
		return(false);
	}
	def var common:int = 0;
	for(movie:Node in adjacentOutgoing(pn3, personToMovie))
	{
		if(movie in movies) {
			common = common + 1;
			if(common >= 3) {
				return(true);
			}
		}
	}
	return(false);
}

function atLeastThreeCommonMoviesOf4(pn1:Person, pn2:Person, pn3:Person, pn4:Person) : boolean
{
	def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
	movies = movies & adjacentOutgoing(pn2, personToMovie);
	if(movies.size() < 3) {
		return(false);
	}
	movies = movies & adjacentOutgoing(pn3, personToMovie);
	if(movies.size() < 3) {
		return(false);
	}
	def var common:int = 0;
	for(movie:Node in adjacentOutgoing(pn4, personToMovie))
	{
		if(movie in movies) {
			common = common + 1;
			if(common >= 3) {
				return(true);
			}
		}
	}
	return(false);
}

function atLeastThreeCommonMoviesOf5(pn1:Person, pn2:Person, pn3:Person, pn4:Person, pn5:Person) : boolean
{
	def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
	movies = movies & adjacentOutgoing(pn2, personToMovie);
	if(movies.size() < 3) {
		return(false);
	}
	movies = movies & adjacentOutgoing(pn3, personToMovie);
	if(movies.size() < 3) {
		return(false);
	}
	movies = movies & adjacentOutgoing(pn4, personToMovie);
	if(movies.size() < 3) {
		return(false);
	}
	def var common:int = 0;
	for(movie:Node in adjacentOutgoing(pn5, personToMovie))
	{
		if(movie in movies) {
			common = common + 1;
			if(common >= 3) {
				return(true);
			}
		}
	}
	return(false);
}

rule cliques3WithRating
{
	c:Clique;
	c -:persons-> pn1:Person;
	c -:persons-> pn2:Person;
	c -:persons-> pn3:Person;
	if{ uniqueof(pn1) < uniqueof(pn2) && uniqueof(pn2) < uniqueof(pn3); }

	def var avgRating:double;
	def var numMovies:int;
	yield {
		yield avgRating = c.avgRating;
		yield numMovies = outgoing(c, commonMovies).size();
	}
	
	modify {
		emit("avgRating: " + avgRating + " numMovies: " + numMovies + " by " + pn1.name + " and " + pn2.name + " and " + pn3.name + "\n");
	}
} \ orderDescendingBy<avgRating>, orderDescendingBy<numMovies>

rule cliques4WithRating
{
	c:Clique;
	c -:persons-> pn1:Person;
	c -:persons-> pn2:Person;
	c -:persons-> pn3:Person;
	c -:persons-> pn4:Person;
	if{ uniqueof(pn1) < uniqueof(pn2) && uniqueof(pn2) < uniqueof(pn3) && uniqueof(pn3) < uniqueof(pn4); }

	def var avgRating:double;
	def var numMovies:int;
	yield {
		yield avgRating = c.avgRating;
		yield numMovies = outgoing(c, commonMovies).size();
	}
	
	modify {
		emit("avgRating: " + avgRating + " numMovies: " + numMovies + " by " + pn1.name + " and " + pn2.name + " and " + pn3.name + " and " + pn4.name + "\n");
	}
} \ orderDescendingBy<avgRating>, orderDescendingBy<numMovies>

rule cliques5WithRating
{
	c:Clique;
	c -:persons-> pn1:Person;
	c -:persons-> pn2:Person;
	c -:persons-> pn3:Person;
	c -:persons-> pn4:Person;
	c -:persons-> pn5:Person;
	if{ uniqueof(pn1) < uniqueof(pn2) && uniqueof(pn2) < uniqueof(pn3) && uniqueof(pn3) < uniqueof(pn4) && uniqueof(pn4) < uniqueof(pn5); }

	def var avgRating:double;
	def var numMovies:int;
	yield {
		yield avgRating = c.avgRating;
		yield numMovies = outgoing(c, commonMovies).size();
	}
	
	modify {
		emit("avgRating: " + avgRating + " numMovies: " + numMovies + " by " + pn1.name + " and " + pn2.name + " and " + pn3.name + " and " + pn4.name + " and " + pn5.name + "\n");
	}
} \ orderDescendingBy<avgRating>, orderDescendingBy<numMovies>
