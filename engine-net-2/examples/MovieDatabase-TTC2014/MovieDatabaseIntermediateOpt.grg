rule findCouplesIntermediateOpt1
{
	pn1:Person; pn2:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie <-:personToMovie- pn2;
		if{ (adjacentOutgoing(pn1, personToMovie) & adjacentOutgoing(pn2, personToMovie)).size() >= 3; }
	}
	if{ uniqueof(pn1) < uniqueof(pn2); }
	
	modify {
		c:Couple;
		c -:p1-> pn1;
		c -:p2-> pn2;

		exec( [addCommonMoviesIntermediateOpt(c, pn1, pn2)] );
	}
}

rule addCommonMoviesIntermediateOpt(c:Couple, pn1:Person, pn2:Person)
{
	pn1 -:personToMovie-> m:Movie <-:personToMovie- pn2;
	
	modify {
		c -:commonMovies-> m;
	}
}

//----------------------------------------------------

rule findCouplesIntermediateOpt2
{
	pn1:Person; pn2:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie <-:personToMovie- pn2;
		if{ atLeastThreeCommonMoviesIntermediateOpt(pn1, pn2); }
	}
	if{ uniqueof(pn1) < uniqueof(pn2); }
	
	modify {
		c:Couple;
		c -:p1-> pn1;
		c -:p2-> pn2;

		exec( [addCommonMoviesIntermediateOpt(c, pn1, pn2)] );
	}
}

function atLeastThreeCommonMoviesIntermediateOpt(pn1:Person, pn2:Person) : boolean
{
	def var common:int = 0;
	def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
	for(movie:Node in adjacentOutgoing(pn2, personToMovie))
	{
		if(movie in movies) {
			common = common + 1;
			if(common >= 3) {
				return(true);
			}
		}
	}
	return(false);
}

//----------------------------------------------------

rule findCouplesIntermediateOpt3
{
	pn1:Person; pn2:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie <-:personToMovie- pn2;
		if{ atLeastThreeCommonMoviesIntermediateOpt2(pn1, pn2); }
	}
	if{ uniqueof(pn1) < uniqueof(pn2); }
	if{ countAdjacentOutgoing(pn1, personToMovie) >= 3; }
	if{ countAdjacentOutgoing(pn2, personToMovie) >= 3; }
	
	modify {
		c:Couple;
		c -:p1-> pn1;
		c -:p2-> pn2;

		exec( [addCommonMoviesIntermediateOpt(c, pn1, pn2)] );
	}
}

function atLeastThreeCommonMoviesIntermediateOpt2(pn1:Person, pn2:Person) : boolean
{
	if(countAdjacentOutgoing(pn1, personToMovie) <= countAdjacentOutgoing(pn2, personToMovie))
	{
		def var common:int = 0;
		def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
		for(movie:Node in adjacentOutgoing(pn2, personToMovie))
		{
			if(movie in movies) {
				common = common + 1;
				if(common >= 3) {
					return(true);
				}
			}
		}
	}
	else
	{
		def var common:int = 0;
		def ref movies:set<Node> = adjacentOutgoing(pn2, personToMovie);
		for(movie:Node in adjacentOutgoing(pn1, personToMovie))
		{
			if(movie in movies) {
				common = common + 1;
				if(common >= 3) {
					return(true);
				}
			}
		}
	}
	return(false);
}

procedure addCommonMoviesIntermediateOpt(pn1:Person, pn2:Person, c:Couple)
{
	if(countAdjacentOutgoing(pn1, personToMovie) <= countAdjacentOutgoing(pn2, personToMovie))
	{
		def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
		for(movie:Node in adjacentOutgoing(pn2, personToMovie))
		{
			if(movie in movies) {
				add(commonMovies, c, movie);
			}
		}
	}
	else
	{
		def ref movies:set<Node> = adjacentOutgoing(pn2, personToMovie);
		for(movie:Node in adjacentOutgoing(pn1, personToMovie))
		{
			if(movie in movies) {
				add(commonMovies, c, movie);
			}
		}
	}
	return;
}
