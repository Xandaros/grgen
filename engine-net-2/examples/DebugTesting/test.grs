# this file is for manually testing the debugger
new graph test

debug exec !domatch
debug exec domatch ;> domatch
debug exec domatch <; domatch
debug exec domatch || domatch
debug exec domatch && domatch
debug exec domatch | domatch
debug exec domatch ^ domatch
debug exec domatch & domatch

new n:N

debug exec {::id=valloc()} && matchmark+
debug exec {::n.visited[::id]} && {vreset(::id)} && matchmark* && {::n.visited[::id] = false}

debug exec if{domatch; domatch; dontmatch}
debug exec if{dontmatch; domatch; dontmatch}
debug exec if{dontmatch; domatch}

debug exec <matchmark ;> dontmatch>

debug exec [matchmark]

new m:N

debug exec true && false || x:boolean = false ;> y:boolean = x ;> y <; domatch
debug exec ::x = (domatch ^ dontmatch) # && z = @("$1") disabled cause non-interactive execution fails otherwise
debug exec {::m.b = ::x; ::x = ::m.b; def(::z)} <; domatch

debug exec {::s = set<Node>{}; vreset(::id)} ;> (::l)=matchmark ;> {::s.add(::l); ::si=::s.size(); ::s.rem(::l)}
debug exec {::s.add(::l); ::l in ::s} <; dontmatch
debug exec for{::i in ::s; setstring(::i)}
debug exec {::si=::s.empty(); ::s.clear(); ::si} <; domatch

debug exec ::ss = map<Node,Node>{} && (::ll)=matchmark ;> {::ss.add(::l,::ll); ::si=::ss.size(); ::ss.rem(::l)}
debug exec {::ss.add(::l,::ll); ::l in ::ss} <; dontmatch
debug exec for{::i->::j in ::ss; setstring(::j)}
debug exec {::k = ::ss[::l]; ::si=::ss.empty(); ::ss.clear(); ::si} <; domatch

debug exec {vreset(::id)} && s:set<Node> = set<Node>{} && {s.add(::n); s.add(::m)} && for{::i in s; unsetstring(::i)} && {vfree(::id)}

