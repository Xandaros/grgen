// this is the same removeEpsilons3.grg, but without the using statement
// it is included in the simulate rule files, and there can only be one using statement

test checkStartState {
    x:StartState;
    negative {
        x;
        y:StartState;
    }
}

test checkDoublettes {
    x:State -e:Transition-> y:State;
    hom(x,y);
    x -doublette:Transition-> y;
    if {typeof(doublette) == typeof(e);}
    if { ((typeof(e) == EpsilonTransition) || (e.Trigger == doublette.Trigger)); }
}

rule forwardTransition {
    x:State -:EpsilonTransition-> y:State -e:Transition-> z:State;
    hom(y,z);
    negative {
        x -exists:Transition-> z;
        if {typeof(exists) == typeof(e);}
        if { ((typeof(e) == EpsilonTransition) || (e.Trigger == exists.Trigger)); }
    }

    modify {
        x -forward:typeof(e)-> z;
        eval {forward.Trigger = e.Trigger;}
    }    
}

rule addStartFinalState {
    x:StartState -:EpsilonTransition-> :FinalState;

    modify {
        y:StartFinalState<x>;        
    }
}

rule addFinalState {
    x:State -:EpsilonTransition-> :FinalState;
    if {typeof(x) < SpecialState;}

    modify {
        y:FinalState<x>;
    }
}

rule removeEpsilonTransition {
    -:EpsilonTransition->;

    replace {
	}   
}

rule removeLonelyStates {
	x:State;
	negative {
		x<-->;
	}
	
    modify {
		delete(x);
	}
}

test epsilonTransition {
	-:EpsilonTransition->;
}
