// dumps java program graph into gxl
// dumping by hand is not needed any more, you can just use the gxl export of GrShell/API
rule dumpGxl(var v:int)
{

	modify {
		emit("<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
			"<!DOCTYPE gxl SYSTEM \"http://www.gupro.de/GXL/gxl-1.0.dtd\">",
			"<gxl>",
			"<graph id=\"", nameof(), "\" edgeids=\"true\">",
			"<type xlink:href=\"javaProgramGraphsSchema\"/>");
		exec( (dumpNodePackage(v) || dumpNodeClass(v) || dumpNodeInterface(v) || dumpNodeVariable(v)
				|| dumpNodeOperation(v) || dumpNodeMethodBody(v) || dumpNodeAccess(v) || dumpNodeUpdate(v)
				|| dumpNodeCall(v) || dumpNodeIstantiation(v) || dumpNodeOperator(v) || dumpNodeReturn(v)
				|| dumpNodeBlock(v)  || dumpNodeLiteral(v) || dumpNodeParameter(v))*
				&&
				(dumpEdgeBelongsTo(v) || dumpEdgeType(v) || dumpEdgeExtends(v) || dumpEdgeImports(v)
				|| dumpEdgeImplements(v) || dumpEdgeParameter(v) || dumpEdgeBinding(v) || dumpEdgeLink(v)
				|| dumpEdgeExpression(v) || dumpEdgeActualParameter(v))* );
		emit("</graph>",
			"</gxl>");
	}
}

rule dumpNodePackage(var v:int)
{
	n:Package;

	if { !n.visited[v]; }

	modify {
	    eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Package\"/>",
			"<attr name=\"name\"> <string>", n.name, "</string> </attr>",
			"</node>");
	}
}

rule dumpNodeClass(var v:int)
{
	n:Class;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Class\"/>",
			"<attr name=\"name\"> <string>", n.name, "</string> </attr>",
			"<attr name=\"visibility\"> <string>", n.visibility, "</string> </attr>",
			"<attr name=\"isAbstract\"> <bool>", n.isAbstract, "</bool> </attr>",
			"<attr name=\"isFinal\"> <bool>", n.isFinal, "</bool> </attr>",
			"</node>");
	}
}

rule dumpNodeInterface(var v:int)
{
	n:Interface;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Interface\"/>",
			"<attr name=\"name\"> <string>", n.name, "</string> </attr>",
			"<attr name=\"visibility\"> <string>", n.visibility, "</string> </attr>",
			"<attr name=\"isAbstract\"> <bool>", n.isAbstract, "</bool> </attr>",
			"</node>");
	}
}

rule dumpNodeVariable(var v:int)
{
	n:Variable;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Variable\"/>",
			"<attr name=\"name\"> <string>", n.name, "</string> </attr>",
			"<attr name=\"visibility\"> <string>", n.visibility, "</string> </attr>",
			"<attr name=\"isStatic\"> <bool>", n.isStatic, "</bool> </attr>",
			"<attr name=\"isFinal\"> <bool>", n.isFinal, "</bool> </attr>",
			"</node>");
	}
}

rule dumpNodeOperation(var v:int)
{
	n:Operation;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Operation\"/>",
			"<attr name=\"name\"> <string>", n.name, "</string> </attr>",
			"<attr name=\"visibility\"> <string>", n.visibility, "</string> </attr>",
			"<attr name=\"isAbstract\"> <bool>", n.isAbstract, "</bool> </attr>",
			"<attr name=\"isStatic\"> <bool>", n.isStatic, "</bool> </attr>",
			"<attr name=\"isFinal\"> <bool>", n.isFinal, "</bool> </attr>",
			"</node>");
	}
}

rule dumpNodeMethodBody(var v:int)
{
	n:MethodBody;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"MethodBody\"/>",
			"</node>");
	}
}

rule dumpNodeAccess(var v:int)
{
	n:Access;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Access\"/>",
			"<attr name=\"this\"> <bool>", n.this_, "</bool> </attr>",
			"</node>");
	}
}

rule dumpNodeUpdate(var v:int)
{
	n:Update;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Update\"/>",
			"<attr name=\"this\"> <bool>", n.this_, "</bool> </attr>",
			"</node>");
	}
}

rule dumpNodeCall(var v:int)
{
	n:Call;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Call\"/>",
			"<attr name=\"this\"> <bool>", n.this_, "</bool> </attr>",
			"<attr name=\"super\"> <bool>", n.super, "</bool> </attr>",
			"</node>");
	}
}

rule dumpNodeIstantiation(var v:int)
{
	n:Instantiation;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Instantiation\"/>",
			"</node>");
	}
}

rule dumpNodeOperator(var v:int)
{
	n:Operator;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Operator\"/>",
			"<attr name=\"name\"> <string>", n.name, "</string> </attr>",
			"</node>");
	}
}

rule dumpNodeReturn(var v:int)
{
	n:Return;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Return\"/>",
			"</node>");
	}
}

rule dumpNodeBlock(var v:int)
{
	n:Block;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Block\"/>",
			"</node>");
	}
}

rule dumpNodeLiteral(var v:int)
{
	n:Literal;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Literal\"/>",
			"<attr name=\"value\"> <string>", n.value, "</string> </attr>",
			"</node>");
	}
}

rule dumpNodeParameter(var v:int)
{
	n:Parameter;

	if { !n.visited[v]; }

	modify {
		eval { n.visited[v] = true; }

		emit("<node id=\"", nameof(n), "\">",
			"<type xlink:href=\"Parameter\"/>",
			"</node>");
	}
}

rule dumpEdgeBelongsTo(var v:int)
{
	src:Node -e:belongsTo-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"belongsTo\"/>",
			"</edge>");
	}
}

rule dumpEdgeType(var v:int)
{
	src:Node -e:type_-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"type\"/>",
			"</edge>");
	}
}

rule dumpEdgeExtends(var v:int)
{
	src:Node -e:extends_-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"extends\"/>",
			"</edge>");
	}
}

rule dumpEdgeImports(var v:int)
{
	src:Node -e:imports-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"imports\"/>",
			"</edge>");
	}
}

rule dumpEdgeImplements(var v:int)
{
	src:Node -e:implements-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"implements\"/>",
			"</edge>");
	}
}

rule dumpEdgeParameter(var v:int)
{
	src:Node -e:parameter-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"parameter\"/>",
			"</edge>");
	}
}

rule dumpEdgeBinding(var v:int)
{
	src:Node -e:binding-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"binding\"/>",
			"</edge>");
	}
}

rule dumpEdgeLink(var v:int)
{
	src:Node -e:link-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"link\"/>",
			"</edge>");
	}
}

rule dumpEdgeExpression(var v:int)
{
	src:Node -e:expression-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"expression\"/>",
			"</edge>");
	}
}

rule dumpEdgeActualParameter(var v:int)
{
	src:Node -e:actualParameter-> tgt:Node;

	if { !e.visited[v]; }

	modify {
		eval { e.visited[v] = true; }

		emit("<edge id=\"", nameof(e), "\" from=\"", nameof(src), "\" to=\"", nameof(tgt), "\">",
			"<type xlink:href=\"actualParameter\"/>",
			"</edge>");
	}
}
