# solution to move method of RefactoringCase of Grabats

include InstanceGraph.grsi
include InstanceGraphLayout.grsi

# programmed gxl dumper, not needed any more, shell can export to .gxl as of no
redirect emit program.gxl
xgrs visId = valloc() && dumpGxl(visId) && vfree(visId)

xgrs InsertHelperEdgesForNestedLayout

# move method - move method m from class source to class target

# a) change access to use parameter if method has some parameter p of type target
#   -check preconditions
#   -add source parameter to signature if "this" is accessed in moved method body 
#      (i.e. some source class member is accessed), and rewrite body to use parameter instead of "this"
#   -move method body and operation from source to target class (change of type of implicit "this" parameter)
#   -change the access before the call to use the target expression
#   -with source parameter if needed
#   todo: (if correspondence formal parameter <-> actual parameter can be established 
#          -- further information must be added to graph (model) in order to do so)
#   -remove target parameter from signature
#   -rewrite target parameter usages in moved method body to this
# b) change access to use instance variable if some instance variable v of type target exists in source
#   -check preconditions
#   -add source parameter to signature if "this" is accessed in moved method body
#      (i.e. some source class member is accessed), and rewrite body to use parameter instead of "this"
#   -move method body and operation from source to target class (change of type of implicit "this" parameter)
#   -change the access before the call to use the instance variable (src.tgt.)
#   -with source parameter if needed
# c) add delegate method
#   -check preconditions
#   -copy operation from source class to target class
#   -relink method body to target class operation
#   -add source parameter to target signature if "this" is accessed in moved method body,
#      and rewrite body to use parameter instead of "this"
#   -add delegating body, forwarding operation parameters in call 

# ask user for source class, target class and method to move
# debug apply (src,tgt,mb)=getSourceAndTargetAndMethodBody(?,?,?)
# or in order to move the one large method to packet (same parameter) or string (same instance variable)
src = I176 # class Node
tgt = I194 # class Packet - use if parameter is used in moving method
# tgt = I617 # class String - use if instance variable is used in moving method
mb = I409 # method body of send

xgrs (op)=getOperation(mb)

xgrs markExpressionOfBody(mb)* #mark all expressions in body of method

debug xgrs (p)=someParameterOfTargetType(mb,tgt) \
		&& !callToSuperExists && !isStatic(mb) && !methodNameExists(mb,tgt) \
		&& (!thisIsAccessed || thisIsAccessed && (srcparam)=addSourceParameter(op,src) && useSourceParameter(srcparam)*) \
		&& relinkOperationAndMethodBody(op,mb,src,tgt) \
		&& ( (call,pe)=getUnprocessedCallWithActualParameter(op,p) \
				&& ((def(srcparam) && addSourceToCall(call,srcparam)) || true) \
				&& (replaceAccess_Parameter_AccessWithoutLink(call,pe) || replaceAccess_Parameter_AccessWithLinkToExpression(call,pe)) \
		   )*

# debug xgrs (v)=someInstanceVariableOfTargetType(mb,tgt) \
#		&& !callToSuperExists && !isStatic(mb) && !methodNameExists(mb,tgt) \
#		&& (!thisIsAccessed || thisIsAccessed && (srcparam)=addSourceParameter(op,src) && useSourceParameter(srcparam)*) \
#		&& relinkOperationAndMethodBody(op,mb,src,tgt) \
#		&& ((def(srcparam) && [replaceAccess_Variable_WithSource(op,v,srcparam)]) || [replaceAccess_Variable(op,v)])

# debug set layout Hierarchic # use hierarchic with delegate, there are problems with compilergraph
# debug xgrs ((vp)=someInstanceVariableOfTargetType(mb,tgt) || (vp)=someParameterOfTargetType(mb,tgt)) \
#		&& !callToSuperExists && !isStatic(mb) && !methodNameExists(mb,tgt) \
#		&& (newop)=copyOperation(op,tgt) && [copyOperationParameter(op,newop)] \
#		&& relinkMethodBody(mb,src,tgt,op,newop) && relinkParameter(mb,op,newop)* \
#		&& (!thisIsAccessed || thisIsAccessed && (srcparam)=addSourceParameter(newop,src) && useSourceParameter(srcparam)*) \
#		&& (call)=addDelegateBody(src,op,newop,vp) && [linkDelegateBodyToOperation(call,newop)]

# unmark all marked expressions
xgrs unmarkExpression*

# programmed gxl dumper, not needed any more, shell can export to .gxl as of no
redirect emit programafter.gxl
xgrs visId = valloc() && dumpGxl(visId) && vfree(visId)
