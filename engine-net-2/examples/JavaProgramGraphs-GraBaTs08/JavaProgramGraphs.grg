using JavaProgramGraphs;

#include "JavaProgramGraphsGxlDumper.gri"
#include "JavaProgramGraphsTextDumper.gri"
#include "NestedLayout.gri"


//***************************************************************************************************
// encapsulate field
//***************************************************************************************************


// dummy test for interactive element choosing
test getClassAndVariable(c:Class, v:Variable) : (Class, Variable)
{
	return(c,v);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// test preconditions

test variableInClass(c:Class, v:Variable) : (boolean)
{
	c <-:belongsTo- v;
	v -:type_-> :Class; // ensure v is typed with a class, needed for setter method insertion
	return(v.isStatic);
}

test methodExists(c:Class, var name:string) : (Operation)
{
	c <-:belongsTo- mb:MethodBody;
	mb <-:binding- op:Operation;
	if { op.name==name; }
	return(op);
}

test sameStaticness(v:Variable, op:Operation)
{
	if { v.isStatic==op.isStatic; }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// insert accessor operations and change visibility of variable

rule insertMethodGetter(c:Class, v:Variable, var name:string, var isStatic:boolean) : (Operation)
{
	// getter: return von access variable
	modify {
		c <-:belongsTo- mb:MethodBody;
		mb <-:binding- op:Operation;
		eval { op.name = name; 
			op.visibility = "public"; 
			op.isAbstract = false; 
			op.isStatic = isStatic; 
			op.isFinal = false; }
			
		mb <-:belongsTo- :Block -:expression-> :Return -:expression-> :Access -:link-> v;
		return(op);
	}
}

rule insertMethodSetter(c:Class, v:Variable, var name:string, var isStatic:boolean) : (Operation)
{
	v -:type_-> type:Class;
	
	// setter: update von variable mit parameter
	modify {
		c <-:belongsTo- mb:MethodBody;
		mb <-:binding- op:Operation;
		eval { op.name = name; 
			op.visibility = "public"; 
			op.isAbstract = false; 
			op.isStatic = isStatic; 
			op.isFinal = false; }
			
		op -:parameter-> p:Parameter -:type_-> type;
		mb <-:belongsTo- :Block -:expression-> u:Update;
		u -:link-> v;
		u -:expression-> :Access -:link-> p;
		return(op);
	}
}

rule changeVisibility(v:Variable)
{
	modify {
		eval { v.visibility = "private"; }
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// updateReferences only if not in same class

rule adaptAccess(c:Class, v:Variable, getter:Operation)
{	
	a:Access -l:link-> v;
	
	negative {
		:InClass(a, c);
	}

	modify {
		call:Call<a> -:link-> getter;
		delete(l);
	}		
}

rule adaptUpdate(c:Class, v:Variable, setter:Operation)
{	
	u:Update -l:link-> v;
	u -e:expression-> exp:Expression;

	negative {
		:InClass(u, c);
	}
	
	modify {
		call:Call<u> -:link-> setter;
		call -:actualParameter-> exp;
		delete(l);
		delete(e);
	}
}

pattern InClass(e:Expression, c:Class)
{
	alternative {
		Previous {
			prev:Expression\Block -:expression-> e;
			:InClass(prev, c);	
		}
		End {
			prev:Block -:expression-> e;
			mb:MethodBody <-:belongsTo- b:Block;
			c <-:belongsTo- mb;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// updateReferences use accessors always

rule adaptAccessUseAccessorsAlways(c:Class, v:Variable, getter:Operation)
{	
	a:Access -l:link-> v;
	
	modify {
		call:Call<a> -:link-> getter;
		delete(l);
	}		
}

rule adaptUpdateUseAccessorsAlways(c:Class, v:Variable, setter:Operation)
{	
	u:Update -l:link-> v;
	u -e:expression-> exp:Expression;

	modify {
		call:Call<u> -:link-> setter;
		call -:actualParameter-> exp;
		delete(l);
		delete(e);
	}
}


//***************************************************************************************************
// move method
//***************************************************************************************************


// dummy test for interactive element choosing
test getSourceAndTargetAndMethodBody(src:Class, tgt:Class, mb:MethodBody) : (Class, Class, MethodBody)
{
	return(src,tgt,mb);
}

// get operation for method body
test getOperation(mb:MethodBody) : (Operation)
{
	mb <-:binding- op:Operation;
	return(op);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// test preconditions

test someInstanceVariableOfTargetType(mb:MethodBody, tgt:Class) : (Variable)
{
	mb -:belongsTo-> src:Class <-:belongsTo- v:Variable -:type_-> tgt;
	return(v);
}

test someParameterOfTargetType(mb:MethodBody, tgt:Class) : (Parameter)
{
	mb <-:binding- op:Operation -:parameter-> p:Parameter -:type_-> tgt;
	return(p);
}

rule markExpressionOfBody(mb:MethodBody)
{
	mb <-:belongsTo- :Block -:expression-> exp:Expression;

	if { !exp.visited[0]; }
	
	modify {
		eval { exp.visited[0] = true; }
		
		exec( ( markExpressionFollowingExpression(exp) || markExpressionFollowingActualParameter(exp) )* );
	}
}

rule markExpressionFollowingExpression(root:Expression)
{
	root -:expression-> exp:Expression;
	
	if { !exp.visited[0]; }
	
	modify {
		eval { exp.visited[0] = true; }
		
		exec( ( markExpressionFollowingExpression(exp) || markExpressionFollowingActualParameter(exp) )* );
	}
}

rule markExpressionFollowingActualParameter(root:Expression)
{
	root -:actualParameter-> exp:Expression;
	
	if { !exp.visited[0]; }
	
	modify {
		eval { exp.visited[0] = true; }
		
		exec( ( markExpressionFollowingExpression(exp) || markExpressionFollowingActualParameter(exp) )* );
	}
}

rule unmarkExpression
{
	exp:Expression;

	if { exp.visited[0]; }

	modify {
		eval { exp.visited[0] = false; }
	}
}

test callToSuperExists
{
	call:Call;
	
	if { call.super && call.visited[0]; }
}

test isStatic(mb:MethodBody)
{
	mb <-:binding- op:Operation;
	if { op.isStatic; }
}

test methodNameExists(mb:MethodBody, tgt:Class)
{
	mb <-- op:Operation;
	:methodNameExistsSuper(op, tgt);	
}

pattern methodNameExistsSuper(opForName:Operation, cls:Class)
{
	cls <-:belongsTo- op:Operation;

	alternative {
		here {
			if { op.name==opForName.name; }
		}
		super {
			cls -:extends_-> super:Class;
			:methodNameExistsSuper(opForName, super);
		}
	}
}


/////////////////////////////////////////////////////////////////////////////////////////////////////
// move method body (the implementation) and/or the operation from the source to the target class 
// (implicit change of type of "this" parameter)
// add parameter to moved method of type source class, if "this" is accessed, 
// rewrite method to use it instead of this

test thisIsAccessed()
{
	access:Access;
	
	if { access.visited[0]; }
	
	negative {
		access -:link-> ;
	}
}

rule addSourceParameter(op:Operation, src:Class) : (Parameter)
{
	modify {
		op -:parameter-> p:Parameter -:type_-> src;
		return(p);
	}
}

// iterate to find all "this" usages and replace them by a parameter usage
rule useSourceParameter(srcparam:Parameter)
{
	access:Access;
	
	if { access.visited[0]; }
	
	negative {
		access -:link-> ;
	}
	
	modify {
		access -:link-> srcparam;
	}
}

rule copyOperation(op:Operation, tgt:Class) : (Operation)
{
	modify {
		newop:Operation -:inClass-> tgt;
		return(newop);
	}
}

rule copyOperationParameter(op:Operation, newop:Operation)
{
	op -:parameter-> p:Parameter;
	
	modify {
		newop -:parameter-> newp:Parameter;		
	}
}

// link method body to new operation
rule relinkMethodBody(mb:MethodBody, src:Class, tgt:Class, op:Operation, newop:Operation)
{
	src <-b1:belongsTo- mb <-b:binding- op;

	modify {
		delete(b1,b);
		tgt <-newb1:belongsTo- mb <-newb:binding- newop;
	}
}

// relink usage of parameters of old operation to usage of parameters of new operation, iterate
rule relinkParameter(mb:MethodBody, op:Operation, newop:Operation)
{
	// marked access or update with link to parameter of old op
	exp:Expression -l:link-> p:Parameter <-:parameter- op;
	
	// can't correlate formal parameters due to missing information in graph (model) 
	// - parameters should be ordered by attribute
	// so just link arbitrarily..
	newp:Parameter <-:parameter- newop;
	
	modify {
		delete(l);
		exp -newl:link-> newp;
	}
}


// for update usages method - bit easier than delegate handling
rule relinkOperationAndMethodBody(op:Operation, mb:MethodBody, src:Class, tgt:Class)
{
	src <-bc:belongsTo- mb <-b:binding- op;

	modify {
		delete(bc);
		tgt <-newbc:belongsTo- mb <-b- op;
		op -:inClass-> tgt; //for nested layout
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// move method c) - use delegation method, no access rewriting needed

// add a method body calling the moved method
rule addDelegateBody(src:Class, own:Operation, orig:Operation, vp:Node) : (Call)
{
	modify {
		src <-:belongsTo- mb:MethodBody <-:belongsTo- bl:Block;
		mb <-b:binding- own;
		bl -:expression-> access:Access -:expression-> call:Call -:link-> orig;
		access -:link-> vp; // call via instance variable or parameter
		access -:inBlock-> bl; //for nested layout
		call -:inBlock-> bl; //for nested layout
		return(call);
	}
}

// add actual parameters to call, accessing formal parameters
rule linkDelegateBodyToOperation(call:Call, op:Operation)
{
	op -:parameter-> param:Parameter;

	// can't correlate actual parameter to formal parameter due to missing information in graph (model) 
	// - parameters should be ordered by attribute
	// so just link arbitrarily..
	// if source was added, one of the parameters isn't a parameter in delegate method
	
	modify {
		call -:actualParameter-> access:Access -:link-> param;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// move method b) - rewrite access operations to use instance variable

rule replaceAccess_Variable(movedOperation:Operation, v:Variable)
{
	a:Access -e:expression-> call:Call -l:link-> movedOperation;
	call -:inBlock-> b:Block; //for nested layout
	
	modify {
		delete(e);
		a -:expression-> targetAccess:Access -:expression-> call;
		targetAccess -:link-> v;
		targetAccess -:inBlock-> b; //for nested layout
	}
}

rule replaceAccess_Variable_WithSource(movedOperation:Operation, v:Variable, srcparam:Parameter)
{
	a:Access -e:expression-> call:Call -l:link-> movedOperation;
	call -:inBlock-> b:Block; //for nested layout

	modify {
		delete(e);
		a -:expression-> targetAccess:Access -:expression-> call;
		targetAccess -:link-> v;
		call -:actualParameter-> srcparam;
		targetAccess -:inBlock-> b; //for nested layout
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// move method a) - rewrite access operations to use parameter

rule addSourceToCall(call:Call, srcparam:Parameter)
{
	modify {
		call -:actualParameter-> srcparam;
	}
}

test getUnprocessedCallWithActualParameter(movedOperation:Operation, p:Parameter) : (Call, Expression)
{
	// can't link actual parameter expression to formal parameter, information missing
	// so choose indeterministically (by matching one)
	a:Access -e:expression-> c:Call;
	c -:link-> movedOperation -:parameter-> p;
	c -:actualParameter-> pe:Expression;

	negative {
		a -:link-> pe; // ensure we don't process an already processed element
	}
	
	return(c, pe);
}

rule replaceAccess_Parameter_AccessWithoutLink(c:Call, pe:Expression)
{
	a:Access -e:expression-> c;
	c -:actualParameter-> pe;

	negative {
		// without link means "this" is accessed
		a -:link-> :Expression;
	}

	modify {
		a -:link-> pe;
	}
}

rule replaceAccess_Parameter_AccessWithLinkToExpression(c:Call, pe:Expression)
{
	a:Access -e:expression-> c;
	c -:actualParameter-> pe;

	a -old:link-> le:Expression;
	
	modify {
		delete(old);
		a -new:link-> pe;
	}
}

