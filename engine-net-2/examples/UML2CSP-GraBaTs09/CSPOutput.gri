//
// Initialize file output and create helper nodes
//

rule InitOutput : (grIO_File, grIO_File_Line, ProcessAssignment, ProcessAssignment)
{
  :CspContainer -:processAssignments-> firstPa:ProcessAssignment;
  lastPa:ProcessAssignment;
  negative { lastPa -:processAssignments->; }

  modify {
    :grIO_OUTPUT -:grIO_CreateOrOverwrite-> file:grIO_File;
    file -:grIO_File_ContainsLine-> dummyLine:grIO_File_Line;
    counter:Counter;
    lastPa -:processAssignments-> dummyPa:ProcessAssignment;
    
    eval {
      file.path = "output.csp";
      dummyLine.content = "<dummy line>";
    }
    return (file, dummyLine, firstPa, dummyPa);
  }
}

//
// Process
//

rule PAWriteProcess(file:grIO_File, lastLine:grIO_File_Line, curPa:ProcessAssignment)
    : (grIO_File_Line, ProcessAssignment)
{
  procID:Process <-:processIdentifier- curPa -:process-> proc:Process;
  curPa -:processAssignments-> nextPa:ProcessAssignment;

  modify {
    file -:grIO_File_ContainsLine-> newLine:grIO_File_Line <-:grIO_File_NextLine- lastLine;
  
    eval {
      newLine.content = procID.name + " = " + proc.name;
    }
  
    return (newLine, nextPa);
  }
}

//
// Prefix
//

rule PAWritePrefix(file:grIO_File, lastLine:grIO_File_Line, curPa:ProcessAssignment)
    : (grIO_File_Line, ProcessAssignment)
{
  procID:Process <-:processIdentifier- curPa -:process-> pre:Prefix;
  pre -:targetProcess-> tgt:Process;
  pre -:event-> ev:Event;
  curPa -:processAssignments-> nextPa:ProcessAssignment;

  modify {
    file -:grIO_File_ContainsLine-> newLine:grIO_File_Line <-:grIO_File_NextLine- lastLine;
  
    eval {
      newLine.content = procID.name + " = " + ev.name + " -> " + tgt.name;
    }
  
    return (newLine, nextPa);
  }
}

//
// Condition
//

rule PAWriteConditionStart(file:grIO_File, lastLine:grIO_File_Line, curPa:ProcessAssignment)
    : (grIO_File_Line, Condition, ProcessAssignment)
{
  procID:Process <-:processIdentifier- curPa -:process-> cond:Condition;
  curPa -:processAssignments-> nextPa:ProcessAssignment;

  modify {
    file -:grIO_File_ContainsLine-> newLine:grIO_File_Line <-:grIO_File_NextLine- lastLine;
    
    eval {
      newLine.content = procID.name + " = ";
    }
    
    return (newLine, cond, nextPa);
  }
}

rule PAWriteConditionNext(curLine:grIO_File_Line, curCond:Condition) : (Condition)
{
  thenProc:Process <-:leftHandSide- curCond -:rightHandSide-> nextCond:Condition;
  counter:Counter;

  modify {
    eval {
      curLine.content = curLine.content + (counter.value > 0 ? "(" : "") + thenProc.name
          + " <| " + curCond.expression + " |> ";
      counter.value = counter.value + 1;
    }
    return (nextCond);
  }
}

rule PAWriteConditionLast(curLine:grIO_File_Line, curCond:Condition)
{
  thenProc:Process <-:leftHandSide- curCond -:rightHandSide-> elseProc:Process;
  counter:Counter;

  modify {
    eval {
      curLine.content = curLine.content + (counter.value > 0 ? "(" : "") + thenProc.name
          + " <| " + curCond.expression + " |> " + elseProc.name;
    }
  }
}

rule PAWriteConditionEnd(curLine:grIO_File_Line)
{
  counter:Counter;
  if { counter.value > 0; }

  modify {
    eval {
      curLine.content = curLine.content + ")";
      counter.value = counter.value - 1;
    }
  }
}

//
// Concurrency
//

rule PAWriteConcurrencyStart(file:grIO_File, lastLine:grIO_File_Line, curPa:ProcessAssignment)
    : (grIO_File_Line, Concurrency, ProcessAssignment)
{
  procID:Process <-:processIdentifier- curPa -:process-> conc:Concurrency
    -:leftHandSide-> forkProc:Process;
  curPa -:processAssignments-> nextPa:ProcessAssignment;

  modify {
    file -:grIO_File_ContainsLine-> newLine:grIO_File_Line <-:grIO_File_NextLine- lastLine;
    
    eval {
      newLine.content = procID.name + " = " + forkProc.name;
    }
    
    return (newLine, conc, nextPa);
  }
}

rule PAWriteConcurrencyNext(curLine:grIO_File_Line, curConc:Concurrency) : (Concurrency)
{
  curConc -:rightHandSide-> nextConc:Concurrency -:leftHandSide-> forkProc:Process;

  modify {
    eval {
      curLine.content = curLine.content + " || " + forkProc.name;
    }
    return (nextConc);
  }
}

rule PAWriteConcurrencyLast(curLine:grIO_File_Line, curConc:Concurrency)
{
  curConc -:rightHandSide-> forkProc:Process;

  modify {
    eval {
      curLine.content = curLine.content + " || " + forkProc.name;
    }
  }
}

//
// Remove helper nodes
//

rule FinishOutput(dummyLine:grIO_File_Line, dummyPa:ProcessAssignment)
{
  counter:Counter;

  modify {
    delete(dummyLine);
    delete(dummyPa);
    delete(counter);
  }
}
