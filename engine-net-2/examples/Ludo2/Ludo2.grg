#using "Ludo2Model.gm"

rule init {
  replace {
    // init board

    redStart:RedStartField -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> innerRed:Field
      -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field
      -:anyPath-> blueGoalEntry:Field -:notBluePath-> blueStart:BlueStartField
      -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> innerBlue:Field
      -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field
      -:anyPath-> yellowGoalEntry:Field -:notYellowPath-> yellowStart:YellowStartField
      -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> innerYellow:Field
      -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field
      -:anyPath-> greenGoalEntry:Field -:notGreenPath-> greenStart:GreenStartField
      -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> innerGreen:Field
      -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field -:anyPath-> :Field
      -:anyPath-> redGoalEntry:Field -:notRedPath-> redStart;

    redGoalEntry -:redPath-> :Field -:redPath-> :Field -:redPath-> :Field -:redPath-> lastGoalRed:Field;
    blueGoalEntry -:bluePath-> :Field -:bluePath-> :Field -:bluePath-> :Field -:bluePath-> lastGoalBlue:Field;
    yellowGoalEntry -:yellowPath-> :Field -:yellowPath-> :Field -:yellowPath-> :Field -:yellowPath-> lastGoalYellow:Field;
    greenGoalEntry -:greenPath-> :Field -:greenPath-> :Field -:greenPath-> :Field -:greenPath-> lastGoalGreen:Field;

    innerRed -:invisible-> lastGoalBlue -:invisible-> innerBlue -:invisible-> lastGoalYellow
      -:invisible-> innerYellow -:invisible-> lastGoalGreen -:invisible-> innerGreen
      -:invisible-> lastGoalRed -:invisible-> innerRed;

    // Dice

    dice:Dice;
    eval {
      dice.rand = 123456789;
      dice.dots = -1;
      dice.rolls = 0;
    }

    // players

    firstRedFigure:RedFigure       -:nextFigure-> redFig1:RedFigure       -:nextFigure-> redFig2:RedFigure       -:nextFigure-> lastRedFigure:RedFigure       -:nextFigure-> firstRedFigure;
    firstBlueFigure:BlueFigure     -:nextFigure-> blueFig1:BlueFigure     -:nextFigure-> blueFig2:BlueFigure     -:nextFigure-> lastBlueFigure:BlueFigure     -:nextFigure-> firstBlueFigure;
    firstYellowFigure:YellowFigure -:nextFigure-> yellowFig1:YellowFigure -:nextFigure-> yellowFig2:YellowFigure -:nextFigure-> lastYellowFigure:YellowFigure -:nextFigure-> firstYellowFigure;
    firstGreenFigure:GreenFigure   -:nextFigure-> greenFig1:GreenFigure   -:nextFigure-> greenFig2:GreenFigure   -:nextFigure-> lastGreenFigure:GreenFigure   -:nextFigure-> firstGreenFigure;

    redPlayer:RedPlayer -:red-> firstRedFigure;
    redPlayer           -:red-> redFig1;
    redPlayer           -:red-> redFig2;
    redPlayer           -:red-> lastRedFigure;

    bluePlayer:BluePlayer -:blue-> firstBlueFigure;
    bluePlayer            -:blue-> blueFig1;
    bluePlayer            -:blue-> blueFig2;
    bluePlayer            -:blue-> lastBlueFigure;

    yellowPlayer:YellowPlayer -:yellow-> firstYellowFigure;
    yellowPlayer              -:yellow-> yellowFig1;
    yellowPlayer              -:yellow-> yellowFig2;
    yellowPlayer              -:yellow-> lastYellowFigure;

    greenPlayer:GreenPlayer -:green-> firstGreenFigure;
    greenPlayer             -:green-> greenFig1;
    greenPlayer             -:green-> greenFig2;
    greenPlayer             -:green-> lastGreenFigure;

    redPlayer    -:current-> firstRedFigure;
    bluePlayer   -:current-> firstBlueFigure;
    yellowPlayer -:current-> firstYellowFigure;
    greenPlayer  -:current-> firstGreenFigure;

    redPlayer    -:last-> lastRedFigure;
    bluePlayer   -:last-> lastBlueFigure;
    yellowPlayer -:last-> lastYellowFigure;
    greenPlayer  -:last-> lastGreenFigure;

    redPlayer    -:start-> redStart;
    bluePlayer   -:start-> blueStart;
    yellowPlayer -:start-> yellowStart;
    greenPlayer  -:start-> greenStart;

    redPlayer -:nextPlayer-> bluePlayer -:nextPlayer-> yellowPlayer -:nextPlayer-> greenPlayer -:nextPlayer-> redPlayer;

    // red begins

    redPlayer -:holds-> dice;
  }
}

test getDice : (Dice) {
  d:Dice;
  return (d);
}

rule nextRandom {
  d:Dice;

  modify {
    eval {
      d.rand = 1664525 * d.rand + 1013904223;
    }
  }
}

rule trimRandom {
  d:Dice;
  if { d.rand >= 0 && (d.rand >> 8) < 0x7ffffe; }  // (0x7fffff / 6) * 6; }

  modify {
    eval {
      d.dots = (d.rand >> 8) % 6 + 1;
      d.rolls = d.rolls + 1;
    }
  }
}

rule put {
  startField:Field <-:start- p:Player -:holds-> d:Dice;
  if { d.dots == 6; }
  p -:color-> fig:Figure;
  p -:current-> fig;
  negative { fig -:occupies->; }

  modify {
    fig -:intends-> startField;
  }
}

rule move1 {
  p:Player -:holds-> d:Dice;
  if { d.dots == 1; }
  p -c:color-> fig:Figure -:occupies-> :Field -:typeof(c)-> field1:Field;
  p -:current-> fig;

  modify {
    fig -:intends-> field1;
  }
}

rule move2 {
  p:Player -:holds-> d:Dice;
  if { d.dots == 2; }
  p -c:color-> fig:Figure -:occupies-> :Field -:typeof(c)-> :Field -:typeof(c)-> field2:Field;
  p -:current-> fig;

  modify {
    fig -:intends-> field2;
  }
}

rule move3 {
  p:Player -:holds-> d:Dice;
  if { d.dots == 3; }
  p -c:color-> fig:Figure -:occupies-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> field3:Field;
  p -:current-> fig;

  modify {
    fig -:intends-> field3;
  }
}

rule move4 {
  p:Player -:holds-> d:Dice;
  if { d.dots == 4; }
  p -c:color-> fig:Figure -:occupies-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> field4:Field;
  p -:current-> fig;

  modify {
    fig -:intends-> field4;
  }
}

rule move5 {
  p:Player -:holds-> d:Dice;
  if { d.dots == 5; }
  p -c:color-> fig:Figure -:occupies-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> field5:Field;
  p -:current-> fig;

  modify {
    fig -:intends-> field5;
  }
}

rule move6 {
  p:Player -:holds-> d:Dice;
  if { d.dots == 6; }
  p -c:color-> fig:Figure -:occupies-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> :Field -:typeof(c)-> field6:Field;
  p -:current-> fig;

  modify {
    fig -:intends-> field6;
  }
}

rule knockout {
  fig:Figure -:intends-> field:Field;
  victim :Figure -victimOccupies:occupies-> field;
  negative {
    fig <-:color- :Player -:color-> victim;
  }

  modify {
    delete(victimOccupies);
    fig -:occupies-> field;
  }
}

rule noKnockout {
  fig:Figure -:intends-> field:Field;
  negative {
    fig; :Figure -:occupies-> field;      // no other figure may occupy the field yet (fig may "occupy" this because of put rule)
  }

  replace {
    fig -:occupies-> field;
    fig -:intends-> field;
  }
}

rule removeOldOccupies {
  <-oldOccupies:occupies- fig:Figure -:intends-> field:Field;
  fig -:occupies-> field;

  modify {
    delete(oldOccupies);
  }
}

rule removeIntends {
  -:intends->;

  replace {}
}

rule resetFigureChoice {
  p:Player -:holds-> :Dice;
  nextFig:Figure <-:nextFigure- fig:Figure <-c:current- p -l:last->;

  modify {
    delete(c, l);
    p -:current-> nextFig;
    p -:last-> fig;
  }
}

rule chooseNextFigure {
  nextFig:Figure <-:nextFigure- fig:Figure <-c:current- p:Player -:holds-> :Dice;
  negative {
     p -l:last-> fig;
  }

  modify {
    delete(c);
    p -:current-> nextFig;
  }
}

rule nextPlayer {
  next:Player <-:nextPlayer- old:Player -h:holds-> d:Dice;
  if { d.dots != 6; }

  modify {
    delete(h);
    next -:holds-> d;
  }
}

test won {
  -sta[prio=10000]:start-> :Field <-:path- :Field -:path\(anyPath)-> goal1:Field -:path-> goal2:Field -:path-> goal3:Field -:path-> goal4:Field;
  goal1 <-:occupies-;
  goal2 <-:occupies-;
  goal3 <-:occupies-;
  goal4 <-:occupies-;
}
