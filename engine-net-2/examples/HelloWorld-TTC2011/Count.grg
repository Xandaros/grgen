#using "graph1__ecore.gm"
#using "result__ecore.gm"

#include "Emitter.gri"

rule createIntResult : (result_IntResult) {

	modify {
		res:result_IntResult;

		eval {
			res._result = 0;
		}

		return (res);
	}
}

rule countNode(res:result_IntResult) {
	n:graph1_Node;

	modify {
		eval {
			res._result = res._result + 1;
		}
	}
}

rule countLoopingEdge(res:result_IntResult) {
	e:graph1_Edge -:graph1_Edge_src-> n:graph1_Node;
	e             -:graph1_Edge_trg-> n;

	modify {
		eval {
			res._result = res._result + 1;
		}
	}
}

rule countIsolatedNode(res:result_IntResult) {
	n:graph1_Node;
	negative {
		n <-:graph1_Edge_src-;
	}
	negative {
		n <-:graph1_Edge_trg-;
	}

	modify {
		eval {
			res._result = res._result + 1;
		}
	}
}

rule countCycle(res:result_IntResult) {
	n1:graph1_Node <-:graph1_Edge_src- :graph1_Edge -:graph1_Edge_trg-> n2;
	n2:graph1_Node <-:graph1_Edge_src- :graph1_Edge -:graph1_Edge_trg-> n3;
	n3:graph1_Node <-:graph1_Edge_src- :graph1_Edge -:graph1_Edge_trg-> n1;

	modify {
		eval {
			res._result = res._result + 1;
		}
	}
}

rule countDanglingEdge(res:result_IntResult) {
	e:graph1_Edge;

	alternative {
		missingTrg {
			e -:graph1_Edge_src->;
			negative {
				e -:graph1_Edge_trg->;
			}

			modify { }
		}
		missingSrc {
			e -:graph1_Edge_trg->;
			negative {
				e -:graph1_Edge_src->;
			}

			modify { }
		}
	}

	modify {
		eval {
			res._result = res._result + 1;
		}
	}
}
