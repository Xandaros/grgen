// Control dependencies
rule PDG_init_post_dominance {
	replace {
		exec(PDG_init_post_dominance_step1* && PDG_init_post_dominance_step2* &&
		     PDG_init_post_dominance_step3*);
	}
}

rule PDG_init_post_dominance_step1 {
	a:org_amma_cfg_AbstractNode\(CFG_Enter + CFG_Exit);

	negative {
		a -:pdom-> a;
	}

	modify {
		a -:pdom-> a;
	}
}

rule PDG_init_post_dominance_step2 {
	a:org_amma_cfg_AbstractNode -:Edge\pdom-> b:org_amma_cfg_AbstractNode;

	negative {
		b -:pdom-> a;
	}

	modify {
		b -:pdom-> a;
	}
}

rule PDG_init_post_dominance_step3 {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;

	hom(a,c);
	c -:pdom-> b -:pdom-> a;

	negative {
		c -:pdom-> a;
	}

	modify {
		c -:pdom-> a;
	}
}

rule PDG_determine_post_dominance {
	replace {
		exec((PDG_remove_wrong_post_dominance+ && PDG_propagate_wrong_post_dominance_removing+)* &&
		     PDG_mark_transitive_post_dominance*);
	}
}

rule PDG_remove_wrong_post_dominance {
	a:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> c:org_amma_cfg_AbstractNode;
	d:org_amma_cfg_AbstractNode;

	d -:pdom-> b;
	d -e:pdom-> a;

	negative {
		d -:pdom-> c;
	}

	modify {
		delete(e);
	}
}

rule PDG_propagate_wrong_post_dominance_removing {
	a:org_amma_cfg_AbstractNode;
	a -:Edge\pdom-> b:org_amma_cfg_AbstractNode;
	d:org_amma_cfg_AbstractNode;

	d -e:pdom-> a;

	negative {
		d -:pdom-> b;
	}

	modify {
		delete(e);
	}
}

rule PDG_mark_transitive_post_dominance {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;

	hom(a,c);
	c -:pdom-> b -:pdom-> a;
	c -e:pdom\transitive_pdom-> a;

	modify {
		-:transitive_pdom<e>->;
	}
}

rule PDG_determine_post_dominance_frontiers {
	modify {
		exec(PDG_determine_post_dominance_frontier*);
	}
}

rule PDG_determine_post_dominance_frontier {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;

	hom(b, c);
	c -:pdom-> b;
	a -:Edge\(pdom + pdom_frontier)-> b;

	negative {
		c -:pdom-> a;
	}

	negative {
		c -:pdom_frontier-> a;
	}

	modify {
		c -:pdom_frontier-> a;
	}
}

rule PDG_create_control_dependencies {
	modify {
		exec([PDG_create_control_dependency] & [PDG_add_reflexive_control_dependency]);
	}
}

rule PDG_create_control_dependency {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;

	a -e:pdom_frontier-> b;

	modify {
		delete(e);
		b -:org_amma_pdg_ExpressionNode_controlDependenceNodes-> a;
	}
}

rule PDG_add_reflexive_control_dependency {
	a:org_amma_cfg_IterativeNode;

	modify {
		a -:org_amma_pdg_ExpressionNode_controlDependenceNodes-> a;
	}
}

rule PDG_delete_post_dominance {
	-:pdom->;

	replace {}
}

// Data dependencies
rule PDG_add_data_dependencies {
	modify {
		exec([PDG_prepare_IterativeNode] & [PDG_prepare_ConditionalNode] &
		     PDG_add_transitive_innerExpression* &
		     [PDG_init_valid_path] & add_transitive_valid_path* &
		     PDG_add_binary_data_dependency* & PDG_add_unary_data_dependency* &
		     [PDG_remove_transitive_innerExpression] &
		     [PDG_finish_IterativeNode] & [PDG_finish_ConditionalNode]);
	}
}

rule PDG_prepare_IterativeNode {
	a:org_amma_cfg_IterativeNode;
	a -e:org_amma_cfg_AbstractNode_expression-> expr:org_amma_cfg_Expression;

	modify {
		delete(e);

		dummy:org_amma_cfg_Expression;
		a -:org_amma_cfg_AbstractNode_expression-> dummy;
		dummy -f:org_amma_cfg_Expression_innerExpression-> expr;

		eval {
			dummy._expressionName = "dummy";
			f.index = 1;
		}
	}
}

rule PDG_prepare_ConditionalNode {
	a:org_amma_cfg_ConditionalNode;
	a -e:org_amma_cfg_AbstractNode_expression-> expr:org_amma_cfg_Expression;

	modify {
		delete(e);

		dummy:org_amma_cfg_Expression;
		a -:org_amma_cfg_AbstractNode_expression-> dummy;
		dummy -f:org_amma_cfg_Expression_innerExpression-> expr;

		eval {
			dummy._expressionName = "dummy";
			f.index = 1;
		}
	}
}

rule PDG_init_valid_path {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	a -e:Edge\org_amma_pdg_ExpressionNode_controlDependenceNodes-> b;

	modify {
		a -:valid_path-> b;
	}
}

rule add_transitive_valid_path {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;
	c:org_amma_cfg_AbstractNode;

	hom(a,c);
	a -:valid_path-> b;
	b -:Edge\(org_amma_pdg_ExpressionNode_controlDependenceNodes + valid_path)-> c;

	negative {
		a -:valid_path-> c;
	}

	negative {
		a -:org_amma_cfg_AbstractNode_expression-> expr_a:org_amma_cfg_Expression;
		b -:org_amma_cfg_AbstractNode_expression-> expr_b:org_amma_cfg_Expression;

		expr_a -def_edge:org_amma_cfg_Expression_innerExpression-> def_:org_amma_cfg_Expression;
		expr_b -redef_edge:org_amma_cfg_Expression_innerExpression-> redef:org_amma_cfg_Expression;

		if { def_edge.index == 0 && def_._isIdentifier &&
		     redef_edge.index == 0 && redef._isIdentifier &&
		     def_._expressionName == redef._expressionName;
	   }
	}

	modify {
		a -:valid_path-> c;
	}
}

rule PDG_add_transitive_innerExpression {
	a:org_amma_cfg_Expression;
	b:org_amma_cfg_Expression;
	c:org_amma_cfg_Expression;

	a -e:org_amma_cfg_Expression_innerExpression-> b;
	b -:org_amma_cfg_Expression_innerExpression-> c;

	negative {
		a -:transitive_innerExpression-> c;
	}

	modify {
		a -trans:transitive_innerExpression-> c;

		eval {
			trans.index = e.index;
		}
	}
}

rule PDG_add_binary_data_dependency {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;

	hom(a,b);
	a -:valid_path-> b;

	hom(expr_a, expr_b);
	hom(ea, eb);
	a -ea:org_amma_cfg_AbstractNode_expression-> expr_a:org_amma_cfg_Expression;
	b -eb:org_amma_cfg_AbstractNode_expression-> expr_b:org_amma_cfg_Expression;

	expr_a -def_edge:org_amma_cfg_Expression_innerExpression-> def_:org_amma_cfg_Expression;
	expr_b -use_edge:org_amma_cfg_Expression_innerExpression-> use:org_amma_cfg_Expression;

	if { def_edge.index == 0 && def_._isIdentifier &&
	     use_edge.index == 1 && use._isIdentifier &&
	     def_._expressionName == use._expressionName;
	   }

	negative {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}

	modify {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}
}

rule PDG_add_unary_data_dependency {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;

	hom(a,b);
	a -:valid_path-> b;

	hom(expr_a, expr_b);
	hom(ea, eb);
	a -ea:org_amma_cfg_AbstractNode_expression-> expr_a:org_amma_cfg_Expression;
	b -eb:org_amma_cfg_AbstractNode_expression-> expr_b:org_amma_cfg_Expression;

	hom(def_, use);
	hom(def_edge, use_edge);
	expr_a -def_edge:org_amma_cfg_Expression_innerExpression-> def_:org_amma_cfg_Expression;
	expr_b -use_edge:org_amma_cfg_Expression_innerExpression-> use:org_amma_cfg_Expression;

	if { def_edge.index == 0 && def_._isIdentifier &&
	     use_edge.index == 0 && use._isIdentifier &&
	     def_._expressionName == use._expressionName;
	   }

	negative {
		-use_edge->;
		expr_b -:org_amma_cfg_Expression_innerExpression\transitive_innerExpression->;
	}

	negative {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}

	modify {
		a -:org_amma_pdg_ExpressionNode_dataDependenceNodes-> b;
	}
}

rule PDG_remove_transitive_innerExpression {
	-:transitive_innerExpression->;

	replace {}
}

rule PDG_finish_IterativeNode {
	a:org_amma_cfg_IterativeNode;
	dummy:org_amma_cfg_Expression;
	expr:org_amma_cfg_Expression;
	a -:org_amma_cfg_AbstractNode_expression-> dummy;
	dummy -:org_amma_cfg_Expression_innerExpression-> expr;

	modify {
		delete(dummy);
		a -e:org_amma_cfg_AbstractNode_expression-> expr;
	}
}

rule PDG_finish_ConditionalNode {
	a:org_amma_cfg_ConditionalNode;
	dummy:org_amma_cfg_Expression;
	expr:org_amma_cfg_Expression;
	a -:org_amma_cfg_AbstractNode_expression-> dummy;
	dummy -:org_amma_cfg_Expression_innerExpression-> expr;

	modify {
		delete(dummy);
		a -e:org_amma_cfg_AbstractNode_expression-> expr;
	}
}

rule CFG_nodes_2_PDG {
	modify {
		exec([PDG_remove_cfg_edges] & enter_2_PDG & exit_2_PDG &
		     [IterativeNode_2_PDG] & [ConditionalNode_2_PDG] &
		     [Node_2_PDG] & [innerExpression_2_PDG]);
	}
}

rule PDG_remove_cfg_edges {
	a:org_amma_cfg_AbstractNode;
	b:org_amma_cfg_AbstractNode;

	hom(a,b);
	a -e:Edge\(org_amma_pdg_ExpressionNode_controlDependenceNodes + org_amma_pdg_ExpressionNode_dataDependenceNodes)-> b;

	modify {
		delete(e);
	}
}

rule enter_2_PDG {
	old:CFG_Enter;

	modify {
		new:org_amma_pdg_EnterNode<old>;

		eval {
			new._name = "Enter";
		}
	}
}

rule exit_2_PDG {
	exit:CFG_Exit;

	replace {}
}

rule IterativeNode_2_PDG {
	old:org_amma_cfg_IterativeNode -e:org_amma_cfg_AbstractNode_expression-> old_expr:org_amma_cfg_Expression;

	modify {
		new:org_amma_pdg_ExpressionNode<old>;
		-:org_amma_pdg_ExpressionNode_expression<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;

		eval {
			new._name = old._name;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}

rule ConditionalNode_2_PDG {
	old:org_amma_cfg_ConditionalNode -e:org_amma_cfg_AbstractNode_expression-> old_expr:org_amma_cfg_Expression;

	modify {
		new:org_amma_pdg_ExpressionNode<old>;
		-:org_amma_pdg_ExpressionNode_expression<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;

		eval {
			new._name = old._name;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}

rule Node_2_PDG {
	old:org_amma_cfg_Node -e:org_amma_cfg_AbstractNode_expression-> old_expr:org_amma_cfg_Expression;

	modify {
		new:org_amma_pdg_ExpressionNode<old>;
		-:org_amma_pdg_ExpressionNode_expression<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;

		eval {
			new._name = old._name;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}

rule innerExpression_2_PDG {
	-e:org_amma_cfg_Expression_innerExpression-> old_expr:org_amma_cfg_Expression;

	modify {
		-f:org_amma_pdg_Expression_innerExpressions<e>->;
		new_expr:org_amma_pdg_Expression<old_expr>;

		eval {
			f.index = e.index;
			new_expr._name = old_expr._expressionName;
			new_expr._isIdentifier = old_expr._isIdentifier;
		}
	}
}
