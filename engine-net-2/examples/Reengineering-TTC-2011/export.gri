rule assignId(var id:int, ref nodeToId:map<Node, int>) : (int)
{
	alternative {
		State {
			s:_statemachine::_State;
			if { !(s in nodeToId); }

			modify {
				eval { nodeToId.add(s, id); }
			}
		}
		Transition {
			t:_statemachine::_Transition;
			if { !(t in nodeToId); }

			modify {
				eval { nodeToId.add(t, id); }
			}
		}
	}

	modify {
		return (id + 1);
	}
}

rule emitPrefix
{
	modify {
		emit("<?xml version=\"1.0\" encoding=\"ASCII\"?>\n");
		emit("<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance>\" StateMachine.ecore>\n");
		emit("  <statemachine:StateMachine>\n");
	}
}

rule emitState(ref nodeToId:map<Node, int>)
{
	s:_statemachine::_State;

	iterated outgoing {
		s -:_statemachine::_State_out-> t:_statemachine::_Transition;

		modify {
			emithere(nodeToId[t] + " ");
		}
	}
	iterated incoming {
		s -:_statemachine::_State_in-> t:_statemachine::_Transition;

		modify {
			emithere(nodeToId[t] + " ");
		}
	}

	modify {
		emithere("    <states xmi:type=\"statemachine:State\" xmi:id=\"" + nodeToId[s] + "\" name=\"" + s._name + "\" ");
		emithere("out=\"");
		iterated outgoing;
		emithere("\" in=\"");
		iterated incoming;
		emithere("\" />\n");
	}
}

rule emitTransition(ref nodeToId:map<Node, int>)
{
	src:_statemachine::_State <-:_statemachine::_Transition_src- t:_statemachine::_Transition -:_statemachine::_Transition_dst-> dst:_statemachine::_State;

	modify {
		emit("    <transitions xmi:type=\"statemachine:Transition\" xmi:id=\"" + nodeToId[t] + "\" ");
		emit("action=\"" + t._action + "\" trigger=\"" + t._trigger + "\" ");
		emit("src=\"" + nodeToId[src] + "\" dst=\"" + nodeToId[dst] + "\"");
		emit("/>\n");
	}
}

rule emitSuffix
{

	modify {
		emit("  <statemachine:StateMachine>\n");
		emit("<xmi:XMI>\n");
	}
}

