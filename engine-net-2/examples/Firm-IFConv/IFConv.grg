using Firm;

//#include "Sad.grg"
#include "test.gri"
#include "ifconvTest1.gri"
#include "ifconvTest2.gri"

rule InitDiamond
{
    modify {
        a:Block -:df-> :Jmp -:df-> b:Block -:df-> :Proj -:df-> d:Block;
        a       -:df-> :Jmp -:df-> c:Block -:df-> :Proj -:df-> d;
        a <-:df- :End;
        
        add:Add -:df-> b;
        sub:Sub -:df-> c;
        
        phi:Phi -:df-> a;
        phi -:df-> add;
        phi -:df-> sub;
    }
}

rule CreateEndBlock
{
    b:Block <-:df- :End;
    modify {
        :EndBlock<b>;
    }    
}

rule InitPDom
{
    hom(a,b);
    a:Block;
    b:Block\(EndBlock);
    negative {
        hom(a,b);
        b <-:pdom- a;
    }
    modify {
        b <-:pdom- a;
    }
}

rule InitPDomEnd
{
    a:EndBlock;
    modify {
        a -:pdom-> a;
    }
}

rule CalcPDom
{ 
    a:Block -:df-> :IR_node -:df-> b:Block <-p:pdom- c:Block;
    negative {
        a <-:pdom- c;
    }
    modify {
        delete(p);
    }
}

rule KillReflexivePDom
{
    a:Block -p:pdom-> a;
    modify {
        delete(p);
    }
}

rule ReducePDom
{
    a:Block <-:pdom- b:Block <-:pdom- c:Block;
    a <-p:pdom- c;
    negative {
        c <-:pdom- :Block -:pdom-> a;
    }
    modify {
        delete(p);
    }
}

rule WalkBlocks
{
    cur:Block -:df-> :IR_node -:df-> top:Block <-p:pdom- bottom:Block;
    modify {
        cur -:cdep-> top;
        exec(curBlock:Block=cur && (curBlock)=BuildCDep(curBlock,top,bottom)[*]);
    }
}

rule BuildCDep(cur:Block, top:Block, bottom:Block) : (Block)
{
    cur <-:pdom- next:Block;
    modify {
        next -:cdep-> top;
        return(next);
    }
}

test ICGetPos(-e:df->) : (int)
{
    return (e.pos);
}

rule IFConv
{
    bottom:Block -l:df-> :Jmp -:df-> lb:Block -:cdep-> top      ;
    bottom       -r:df-> :Jmp -:df-> rb:Block -:cdep-> top:Block;
    negative { bottom -:ifconv->; }
    top <-:df- cond:Cond -:df-> condProj:Proj;
    
    modify {
        exec(  ICCheckPathValid(lb, top)
            && ICCheckPathValid(rb, top)
            && (lpos:int)=ICGetPos(l)
            && (rpos:int)=ICGetPos(r)
            && (ICPreparePath(bottom, lb, lpos, top)
            | ICPreparePath(bottom, rb, rpos, top)
            | ICConvPhi(bottom, lpos, rpos, condProj, top)[*])
            | ICRemoveBlockPred(bottom, lpos)
            | ICRemoveBlockPred(bottom, rpos)
            | ICReplaceCondByJump(top, bottom, lpos, cond));
//            && ICCheckLeftEnd(lb, top, lb, rb, bottom));
    }
}

rule ICReplaceCondByJump(from:Block, to:Block, var newPos:int, cond:Cond)
{
    cond <-:df- proj1:Proj;
    cond <-:df- proj2:Proj;
    
    modify {
        delete(proj1, proj2, cond);
    
        from <-:df- :Jmp <-d:df- to;
        eval {
            d.pos = newPos;
        }
    }
}

rule ICConvPhi(block:Block, var i:int, var j:int, condProj:Proj, top:Block)
{
    block <-:df- phi:Phi -dfi:df-> ipred:IR_node\Block;
                     phi -dfj:df-> jpred:IR_node\Block;
    if { dfi.pos == i; dfj.pos == j; }
    
    modify {
        psi:Psi -    :df-> top;
            psi -    :df-> condProj;
            psi -ndfi:df-> ipred;
            psi -ndfj:df-> jpred;
        eval {
            ndfi.pos = i;
            ndfj.pos = j;
        }
        
        delete(dfi, dfj);
        
        phi -ndphi:df-> psi;
        eval {
            ndphi.pos = i;
        }
    }
}

pattern ICCheckPathValidNext(cur:Block, top:Block)
{
    negative {
        cur <-:df- :Call;   // example for side effect node
    }
    alternative
    {
        base
        {
            cur -:df-> :Proj -:df-> top;
        }
        default
        {
            cur -:df-> :Jmp -:df-> next:Block;
            :ICCheckPathValidNext(next, top);
        }        
    }
}

test ICCheckPathValid(cur:Block, top:Block)
{
    :ICCheckPathValidNext(cur, top);
}

rule ICPreparePath(block:Block, pred:Block, var i:int, top:Block)
{
    pred -p:df-> :IR_node\Block -:df-> pred_pred:Block -:cdep-> top;
    
    modify {
        exec(  (ppos:int)=ICGetPos(p)
            && ICPreparePath(pred, pred_pred, ppos, top)
            | ICSplitBlock(block, pred, i, pred_pred, ppos));
    }
}

rule ICSplitBlock(block:Block, pred:Block, var i:int, pred_pred:Block, var j:int)
{
    modify{
        exec((nextPos:int)=ICGetNextPos(block)
            && [ICCopyPhi(block, pred, i, pred_pred, j, nextPos)]
            && (jmp:IR_node)=ICGetBlockEnd(pred)
            && ICAddPred(block, nextPos, jmp)
            && (jmp)=ICGetBlockEnd(pred_pred)
            && ICSetPred(block, i, jmp)
            && ICRemovePhiPred(pred, j)[*]
            && ICRemoveBlockPred(pred, j));
    }
}

rule ICGetNextPos(block:Block) : (int)
{
    block -d:df->;
    negative { block -d2:df->; if { d2.pos > d.pos; } }
    
    modify {
        return (d.pos + 1);
    }
}

rule ICGetBlockEnd(block:Block) : (IR_node)
{
    block <-:df- jmp:Jmp;
    
    modify {
        return (jmp);
    }
}

rule ICRemovePhiPred(block:Block, var i:int)
{
    block <-:df- phi:Phi -dfphi:df->;
    if { dfphi.pos == i; }
    
    modify {
        delete(dfphi);
    }
}

rule ICRemoveBlockPred(block:Block, var i:int)
{
    block -dfblock:df->;
    if { dfblock.pos == i; }
    
    modify {
        delete(dfblock);
    }
}

rule ICCopyPhi(block:Block, pred:Block, var i:int, pred_pred:Block, var j:int, var nextPos:int)
{
    block <-:df- phi:Phi -dfphi:df-> phi_pred:IR_node\Block;
    if { dfphi.pos == i; }
    
    modify {
//        exec(ICCopyTo(phi_pred, pred, pred_pred, j));
        exec(((copy_:IR_node)=ICCopyTo_otherBlock(phi_pred, pred, pred_pred)
            || (copy_)=ICCopyTo_isPhi(phi_pred, pred, pred_pred, j)
            || (copy_)=ICCopyTo_default(phi_pred, pred, pred_pred, j))
            && ICAddPred(phi, nextPos, phi_pred)
            && ICSetPred(phi, i, copy_));
    }
}

rule ICAddPred(curNode:IR_node, var pos:int, pred:IR_node)
{
    modify {
        curNode -d:df-> pred;
        eval {
            d.pos = pos;
        }
    }
}

rule ICSetPred(curNode:IR_node, var pos:int, newPred:IR_node)
{
    curNode -d:df->;
    if { d.pos == pos; }
    
    modify {
        delete(d);
        curNode -dn:df-> newPred;
        eval {
            dn.pos = pos;
        }
    }
}

rule ICCopyTo_otherBlock(curNode:IR_node, block:Block, pred_pred:Block) : (IR_node)
{
    curNode -:df-> :Block;

    modify {
        return (curNode);
    }            
}

rule ICCopyTo_isPhi(curNode:Phi<IR_node>, block:Block, pred_pred:Block, var i:int) : (IR_node)
{
    //curNode -:df-> block;            // same block
    curNode -dfphi:df-> pred:IR_node\Block;
    if { dfphi.pos == i; }
    
    modify {
        return (pred);
    }
}

rule ICCopyTo_default(curNode:IR_node, pred:Block, pred_pred:Block, var i:int) : (IR_node)
{
    //curNode -:df-> block;            // same block
    //if { typeof(curNode) != Phi; }   // not a phi
    
    modify {
        // TODO: Copy all attributes...
        copy_:typeof(curNode) -:df-> pred_pred;
        return (copy_);

        exec([ICCopyPred(copy_, curNode, pred, pred_pred, i)]);
    }
}

rule ICCopyPred(to:IR_node, from:IR_node, pred:Block, pred_pred:Block, var i:int)
{
    from -dfrom:df-> target:IR_node\Block;
    
    modify {
//        exec(ICCopyTo(target, block, i));
        exec(((pred_copy:IR_node)=ICCopyTo_otherBlock(target, pred, pred_pred)
            || (pred_copy)=ICCopyTo_isPhi(target, pred, pred_pred, i)
            || (pred_copy)=ICCopyTo_default(target, pred, pred_pred, i))
            && (pos:int)=ICGetPos(dfrom) && ICAddPred(to, pos, pred_copy));
    }
}

/*rule ICCopyTo(curNode:IR_node, block:Block, var i:int) : (IR_node)
{
    alternative {
        otherBlock
        {
            curNode -:df-> :Block;
            
            modify {
//                return (curNode);
            }            
        }
        isPhi
        {
            curNode -:df-> block;            // same block
            if { typeof(curNode) == Phi; }
            curNode -dfphi:df-> pred:IR_node\Block;
            if { dfphi.pos == i; }
            
            modify {
//                return (pred);
            }
        }
        default
        {
            curNode -:df-> block;            // same block
            if { typeof(curNode) != Phi; }   // not a phi
            
            block -dfblock:df-> :IR_node -:df-> pred_block:Block;
            if { dfblock.pos == i; }
            
            modify {
                // TODO: Copy all attributes...
                copy_:typeof(curNode) -:df-> pred_block;
//                return (copy_);
                
                exec([ICCopyPred(copy_, curNode, block, i)]);
            }
        }
    }
    modify {}
}*/

/*rule ICCheckLeftEnd(cur:Block, top:Block, left:Block, right:Block, bottom:Block)
{
    hom(cur, left);
    cur -:df-> :Proj -:df-> top;
    modify {
        exec(curBlock:Block = right | (curBlock)=ICCheckRight(curBlock, top, left, right, bottom) | ICCheckRightEnd(curBlock, top, left, right, bottom));
    }
}

rule ICCheckRight(cur:Block, top:Block, left:Block, right:Block, bottom:Block) : (Block)
{
    hom(cur, right);
    cur -:df-> :Jmp -:df-> nextBlock:Block -:cdep-> top;
    modify {
        return (nextBlock);
    }
}

rule ICCheckRightEnd(cur:Block, top:Block, left:Block, right:Block, bottom:Block)
{
    hom(cur, right);
    cur -:df-> :Proj -:df-> top;
    modify {
        bottom -:ifconv-> top;
        exec(MoveToBlock(left, top)[*] | MoveToBlock(right, top)[*]);
    }
}

rule MoveToBlock(from:Block, to:Block)
{
    n:IR_node\(Jmp) -d:df-> from;
    modify {
        delete(d);
        n -:df-> to;
    }
}

rule TestRef
{
    :Add -d:df-> :Proj;
    modify {
        delete(d);
    }
}*/


/*rule IFConv
{
    b:Block -l:df-> n:Jmp -:df-> prev:Block;
    modify {
        exec((top)=IFConvLeftEnd(prev,b,l));
    }
}

rule IFConvLeftEnd(cur:Block, bottom:Block, -left:df->) : (Block)
{
    cur -:df-> :Proj -:df-> top:Block;
    modify {
        return(top);

        exec(IFConvRightStart(bottom, top, left));
    }
}

rule IFConvRightStart(bottom:Block, top:Block, -left:df->)
{
    bottom -:df-> :Jmp -:df-> prev:Block -:cdep-> top;
    modify {
        exec(IFConvRightEnd(prev, 
    }    
}

test IFConvRightEnd(cur:Block, top:Block)
{
    cur -:df-> :Proj -:df-> top;
}*/

/*rule testRetype
{
    a:Proj;
    -b:df->;
    c:Block;
//    c:Block <-b:df-;
    modify {
        :Jmp<a>;
        -:cdep<b>->;
        :EndBlock<c>;
    }
}*/
