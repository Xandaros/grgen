new graph "exec2/exec2.grg"

xgrs (::c,::c2,::c3)=Init

show var ::c
show var ::c2
show var ::c3

show num nodes
show num edges
show num nodes "A"
show num nodes "B"
show num edges "ee"

xgrs {::s=incident(::c)}
show var ::s
exec for{::s in incident(::c); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=incoming(::c)}
show var ::s
exec for{::s in incoming(::c); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=outgoing(::c)}
show var ::s
exec for{::s in outgoing(::c); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacent(::c)}
show var ::s
exec for{::s in adjacent(::c); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacentIncoming(::c)}
show var ::s
exec for{::s in adjacentIncoming(::c); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacentOutgoing(::c)}
show var ::s
exec for{::s in adjacentOutgoing(::c); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}


xgrs {::s=incident(::c2)}
show var ::s
exec for{::s in incident(::c2); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=incoming(::c2)}
show var ::s
exec for{::s in incoming(::c2); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=outgoing(::c2)}
show var ::s
exec for{::s in outgoing(::c2); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacent(::c2)}
show var ::s
exec for{::s in adjacent(::c2); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacentIncoming(::c2)}
show var ::s
exec for{::s in adjacentIncoming(::c2); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacentOutgoing(::c2)}
show var ::s
exec for{::s in adjacentOutgoing(::c2); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}


xgrs {::s=incident(::c3)}
show var ::s
exec for{::s in incident(::c3); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=incoming(::c3)}
show var ::s
exec for{::s in incoming(::c3); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=outgoing(::c3)}
show var ::s
exec for{::s in outgoing(::c3); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacent(::c3)}
show var ::s
exec for{::s in adjacent(::c3); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacentIncoming(::c3)}
show var ::s
exec for{::s in adjacentIncoming(::c3); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}

xgrs {::s=adjacentOutgoing(::c3)}
show var ::s
exec for{::s in adjacentOutgoing(::c3); {emit("value of variable ::s 5 6 7 8 9 ")} && {emit(::s)} && {emit("\n")}}


quit
