using recordreplay;

rule checkTestGraphAndPrintNames1
{	
	n1:NA -e1:EA-> n2:NB -e2:EB-> n2;
	
	if {
		n1.foo==42;
		n1.bar=="foo";
		n1.bleeh==set<int>{1,2,3};
		n2.bla==3.141592;
		n2.huh==true;
		n2.lal==Bla::Hurz;
		n2.meeh==array<string>["la","le","lu"];
		e1.foo==1337;
		e1.bar=="fool";
		e1.bleeh==map<int,string>{2->"3",3->"2"};
		e2.bla==2.0f;
		e2.huh==false;
		e2.lal==Bla::Lamm;
		e2.meeh==deque<string>]"la","le","lu"[;
	}
	
	modify {
		emit("value of variable n1 which is a node rly ", nameof(n1), "\n");
		emit("value of variable n2 which is a node rly ", nameof(n2), "\n");
		emit("value of variable e1 which is a edge rly ", nameof(e1), "\n");
		emit("value of variable e2 which is a edge rly ", nameof(e2), "\n");
	}
}

rule createTestGraphWithRules
{	
	modify {
		n1:NA -e1:EA-> n2:NB -e2:EB-> n2;
		
		eval {
			n1.foo = 42;
			n1.bar = "foo";
			n1.bleeh = set<int>{1,2,3};
			n2.bla = 3.141592;
			n2.huh = true;
			n2.lal = Bla::Hurz;
			n2.meeh = array<string>["la","le","lu"];
			e1.foo = 1337;
			e1.bar = "fool";
			e1.bleeh = map<int,string>{2->"3",3->"2"};
			e2.bla = 2.0f;
			e2.huh = false;
			e2.lal = Bla::Lamm;
			e2.meeh = deque<string>]"la","le","lu"[;
		}
	}
}

rule deleteNA
{
	:NA;
	
	replace {
	}
}

rule retypeNA
{
	n:NA;
	
	modify {
		:NB<n>;
	}
}

rule changeAttributesPrimary
{
	-e:EA-> n:NB;
	
	modify {

		eval { 
			n.bla = 123.456;
			n.huh = false;
			n.lal = Bla::Lamm;
		
			e.foo = 7331;
			e.bar = "lool";
			e.bleeh = map<int, string>{ 4->"1",1->"4" };
		}
	}
}

rule changeAttributesOverwritingOverwritingWithSamePartial
{
	-e:EA-> n:NB;

	modify {

		eval { 
			n.huh = false;
			n.lal = Bla::Reh;
		
			e.bar = e.bar + e.bar;
			e.bleeh.add(4,"1");
			e.bleeh.add(5,"0");
			e.bleeh.rem(1);
		}
	}
}

rule deleteEdge
{
	-->;
	
	replace {
	}
}

rule createNodePerNode
{
	.;
	
	modify {
		.;
	}
}

test invert(var input:boolean) : (boolean)
{
	return (!input);
}
