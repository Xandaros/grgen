using model_init;

rule init : (A, A, A, A, A, Node, Node, Node)
{
	modify {
		start1:A -:EE-> a1:A -:EE-> middle1:A -:EE-> a2:A -:EE-> end1:A;
		start1b:A -:EE-> middle1;
		middle1 -:EE-> end1b:A;
		a1 --> a2; // bypass middle
		start2:Node --> . --> middle2:Node <-- . <-- end2:Node;

		return(start1, start1b, middle1, end1, end1b, start2, middle2, end2);
	}
}

rule link(middle1:A, middle2:Node)
{
	modify {
		middle1 --> middle2;
		middle2 --> middle1;
	}
}

rule unlink(middle1:A, middle2:Node)
{
	middle1 -l1:Edge-> middle2;
	middle2 -l2:Edge-> middle1;
	
	modify {
		delete(l1);
		delete(l2);
	}
}

f(start1:A, middle1:A, end1:A, start2:Node, end2:Node) : boolean
{
	if(reachable(start1).size() <= reachable(start2).size()) {
		return(false);
	}
	if(!isReachableOutgoing(start1, end1, EE) || !isReachable(start2, end2)) {
		return(false);
	}
	return(!isReachableOutgoing(start1, end2, EE) && !isReachable(start2, end1));
}

ff(ref rs1:set<Node>, ref rm1:set<Node>, ref rs2:set<Node>, ref re2:set<Node>, start1:A, middle1:A, end1:A, start2:Node, end2:Node) : boolean
{
	def ref _rs1:set<Node> = reachableOutgoing(start1, EE);
	def ref _rm1:set<Node> = reachable(middle1);
	def ref _rs2:set<Node> = reachableOutgoing(start2);
	def ref _re2:set<Node> = reachableOutgoing(end2);
	for(el:Node in _rs1) {
		rs1.add(el);
	}
	for(el:Node in _rm1) {
		rm1.add(el);
	}
	for(el:Node in _rs2) {
		rs2.add(el);
	}
	for(el:Node in _re2) {
		re2.add(el);
	}
	return(isReachable(start1, end2));
}

ffloop(ref rs1:set<Node>, ref rm1:set<Node>, ref rs2:set<Node>, ref re2:set<Node>, start1:A, middle1:A, end1:A, start2:Node, end2:Node) : boolean
{
	for(el:Node in reachableOutgoing(start1, EE)) {
		rs1.add(el);
	}
	for(el:Node in reachable(middle1)) {
		rm1.add(el);
	}
	for(el:Node in reachableOutgoing(start2)) {
		rs2.add(el);
	}
	for(el:Node in reachableOutgoing(end2)) {
		re2.add(el);
	}
	return(isReachable(start1, end2));
}

p(ref rrs1:set<Node>, ref rrm1:set<Node>, ref rrs2:set<Node>, ref rre2:set<Node>, start1:A, middle1:A, end1:A, start2:Node, end2:Node) : (boolean,boolean)
{	
	def ref _rs1:set<Node> = reachableOutgoing(start1, EE);
	def ref _rm1:set<Node> = reachable(middle1);
	def ref _rs2:set<Node> = reachableOutgoing(start2);
	def ref _re2:set<Node> = reachableOutgoing(end2);
	for(el:Node in _rs1) {
		rrs1.add(el);
	}
	for(el:Node in _rm1) {
		rrm1.add(el);
	}
	for(el:Node in _rs2) {
		rrs2.add(el);
	}
	for(el:Node in _re2) {
		rre2.add(el);
	}
	def var iisR11:boolean = isReachableOutgoing(start1, end1, EE);
	def var iisR12:boolean = isReachable(start1, end2);
	return(iisR11, iisR12);
}

ploop(ref rrs1:set<Node>, ref rrm1:set<Node>, ref rrs2:set<Node>, ref rre2:set<Node>, start1:A, middle1:A, end1:A, start2:Node, end2:Node) : (boolean,boolean)
{	
	for(el:Node in reachableOutgoing(start1, EE)) {
		rrs1.add(el);
	}
	for(el:Node in reachable(middle1)) {
		rrm1.add(el);
	}
	for(el:Node in reachableOutgoing(start2)) {
		rrs2.add(el);
	}
	for(el:Node in reachableOutgoing(end2)) {
		rre2.add(el);
	}
	def var iisR11:boolean = isReachableOutgoing(start1, end1, EE);
	def var iisR12:boolean = isReachable(start1, end2);
	return(iisR11, iisR12);
}
