rule initDirected
{
	modify {
		// Clique-4
		n0:Node;
		n1:Node;
		n2:Node;
		n3:Node;
		n0 --> n1;
		n0 --> n2;
		n0 --> n3;
		n1 --> n2;
		n2 --> n3;
		n3 --> n1;
		
		// fast Clique-4 an n3
		n4:Node;
		n5:Node;
		n6:Node;
		n3 --> n4;
		n3 --> n5;
		n3 --> n6;
		n4 --> n5;
		n6 --> n5;
		
		// 3er-Kreis mit n1
		n7:Node;
		n8:Node;
		n1 --> n7;
		n7 --> n8;
		n8 --> n1;
		
		// Stern an n7
		n7 <-- n9:Node;
		n7 <-- nA:Node;
		n7 <-- nB:Node;
		n7 --> nC:Node;
		n7 --> nD:Node;
		n7 --> nE:Node;
	}
}

rule initDirected2
{
	modify {
		// Clique-4
		n0:Node;
		n1:Node;
		n2:Node;
		n3:Node;
		n0 --> n1;
		n0 --> n2;
		n0 --> n3;
		n1 --> n2;
		n2 --> n3;
		n3 --> n1;
		
		// fast Clique-4 an n3
		n4:Node;
		n5:Node;
		n6:Node;
		n3 --> n4;
		n3 --> n5;
		n3 --> n6;
		n4 --> n5;
		n6 --> n5;
		
		// 3er-Kreis mit n1
		n7:Node;
		n8:Node;
		n1 --> n7;
		n7 --> n8;
		n8 --> n1;
		
		// Stern an n7
		n7 <-- n9:Node;
		n7 <-- nA:Node;
		n7 <-- nB:Node;
		n7 --> nC:Node;
		n7 --> nD:Node;
		n7 --> nE:Node;
		
		// 2te Clique-4
		nF:Node;
		nF <-- n1;
		nF <-- n2;
		nF <-- n3;
	}
}

rule initDirectedAndReverse
{
	modify {
		// Clique-4
		n0:Node;
		n1:Node;
		n2:Node;
		n3:Node;
		n0 --> n1; n0 <-- n1;
		n0 --> n2; n0 <-- n2;
		n0 --> n3; n0 <-- n3;
		n1 --> n2; n1 <-- n2;
		n2 --> n3; n2 <-- n3;
		n3 --> n1; n3 <-- n1;
		
		// fast Clique-4 an n3
		n4:Node;
		n5:Node;
		n6:Node;
		n3 --> n4; n3 <-- n4;
		n3 --> n5; n3 <-- n5;
		n3 --> n6; n3 <-- n6;
		n4 --> n5; n4 <-- n5;
		n6 --> n5; n6 <-- n5;
		
		// 3er-Kreis mit n1
		n7:Node;
		n8:Node;
		n1 --> n7; n1 <-- n7;
		n7 --> n8; n7 <-- n8;
		n8 --> n1; n8 <-- n1;
		
		// Stern an n7
		n7 <-- n9:Node; n7 --> n9;
		n7 <-- nA:Node; n7 --> nA;
		n7 <-- nB:Node; n7 --> nB;
		n7 --> nC:Node; n7 <-- nC;
		n7 --> nD:Node; n7 <-- nD;
		n7 --> nE:Node; n7 <-- nE;
	}
}

rule initDirectedAndReverse2
{
	modify {
		// Clique-4
		n0:Node;
		n1:Node;
		n2:Node;
		n3:Node;
		n0 --> n1; n0 <-- n1;
		n0 --> n2; n0 <-- n2;
		n0 --> n3; n0 <-- n3;
		n1 --> n2; n1 <-- n2;
		n2 --> n3; n2 <-- n3;
		n3 --> n1; n3 <-- n1;
		
		// fast Clique-4 an n3
		n4:Node;
		n5:Node;
		n6:Node;
		n3 --> n4; n3 <-- n4;
		n3 --> n5; n3 <-- n5;
		n3 --> n6; n3 <-- n6;
		n4 --> n5; n4 <-- n5;
		n6 --> n5; n6 <-- n5;
		
		// 3er-Kreis mit n1
		n7:Node;
		n8:Node;
		n1 --> n7; n1 <-- n7;
		n7 --> n8; n7 <-- n8;
		n8 --> n1; n8 <-- n1;
		
		// Stern an n7
		n7 <-- n9:Node; n7 --> n9;
		n7 <-- nA:Node; n7 --> nA;
		n7 <-- nB:Node; n7 --> nB;
		n7 --> nC:Node; n7 <-- nC;
		n7 --> nD:Node; n7 <-- nD;
		n7 --> nE:Node; n7 <-- nE;
		
		// 2te Clique-4
		nF:Node;
		nF <-- n1; nF --> n1;
		nF <-- n2; nF --> n2;
		nF <-- n3; nF --> n3;

	}
}

rule initUndirected
{
	modify {
		// Clique-4
		n0:Node;
		n1:Node;
		n2:Node;
		n3:Node;
		n0 -- n1;
		n0 -- n2;
		n0 -- n3;
		n1 -- n2;
		n2 -- n3;
		n3 -- n1;
		
		// fast Clique-4 an n3
		n4:Node;
		n5:Node;
		n6:Node;
		n3 -- n4;
		n3 -- n5;
		n3 -- n6;
		n4 -- n5;
		n6 -- n5;
		
		// 3er-Kreis mit n1
		n7:Node;
		n8:Node;
		n1 -- n7;
		n7 -- n8;
		n8 -- n1;
		
		// Stern an n7
		n7 -- n9:Node;
		n7 -- nA:Node;
		n7 -- nB:Node;
		n7 -- nC:Node;
		n7 -- nD:Node;
		n7 -- nE:Node;
	}
}

rule initUndirected2
{
	modify {
		// Clique-4
		n0:Node;
		n1:Node;
		n2:Node;
		n3:Node;
		n0 -- n1;
		n0 -- n2;
		n0 -- n3;
		n1 -- n2;
		n2 -- n3;
		n3 -- n1;
		
		// fast Clique-4 an n3
		n4:Node;
		n5:Node;
		n6:Node;
		n3 -- n4;
		n3 -- n5;
		n3 -- n6;
		n4 -- n5;
		n6 -- n5;
		
		// 3er-Kreis mit n1
		n7:Node;
		n8:Node;
		n1 -- n7;
		n7 -- n8;
		n8 -- n1;
		
		// Stern an n7
		n7 -- n9:Node;
		n7 -- nA:Node;
		n7 -- nB:Node;
		n7 -- nC:Node;
		n7 -- nD:Node;
		n7 -- nE:Node;
		
		// 2te Clique-4
		nF:Node;
		nF -- n1;
		nF -- n2;
		nF -- n3;
	}
}

test Clique4Directed
{
	// Clique-4
	n0:Node;
	n1:Node;
	n2:Node;
	n3:Node;
	n0 --> n1;
	n0 --> n2;
	n0 --> n3;
	n1 --> n2;
	n2 --> n3;
	n3 --> n1;
}

test Clique4ArbitraryDirected
{
	// Clique-4
	n0:Node;
	n1:Node;
	n2:Node;
	n3:Node;
	n0 <--> n1;
	n0 <--> n2;
	n0 <--> n3;
	n1 <--> n2;
	n2 <--> n3;
	n3 <--> n1;
}

test Clique4Undirected
{
	// Clique-4
	n0:Node;
	n1:Node;
	n2:Node;
	n3:Node;
	n0 -- n1;
	n0 -- n2;
	n0 -- n3;
	n1 -- n2;
	n2 -- n3;
	n3 -- n1;
}

test Clique4Arbitrary
{
	// Clique-4
	n0:Node;
	n1:Node;
	n2:Node;
	n3:Node;
	n0 ?--? n1;
	n0 ?--? n2;
	n0 ?--? n3;
	n1 ?--? n2;
	n2 ?--? n3;
	n3 ?--? n1;
}

test Clique4DirectedAndReverse
{
	// Clique-4
	n0:Node;
	n1:Node;
	n2:Node;
	n3:Node;
	n0 --> n1; n0 <-- n1;
	n0 --> n2; n0 <-- n2;
	n0 --> n3; n0 <-- n3;
	n1 --> n2; n1 <-- n2;
	n2 --> n3; n2 <-- n3;
	n3 --> n1; n3 <-- n1;
}

