new graph "statespaceChemistry/lysine"

exec (a:Atom)=lysine ;> (m:Molecule)=buildMolecule(a) ;> {m.sub=inducedSubgraph(adjacentOutgoing(m, contains))}

include statespaceChemistry/layout.grsi

def addReactionResultsIfNotYetExisting(mol:Molecule) {\
	( existsChild(mol) && ((newmol:Molecule)=buildMoleculeFromReactionResult(mol) <; adj:set<Node>=set<Node>{} <; {newmol.sub=inducedSubgraph(adj)}) &&\
	( sub:graph ;> newmolcopy:Molecule ;> {adj=adjacentOutgoing(newmol, contains); sub=inducedSubgraph(adj)} ;> if{ for{others:Molecule in nodes(Molecule); {sub!=others.sub} } ; / {(newmolcopy)=insertInduced(adj, newmol)} && {newmolcopy.sub=sub} / } ;> deleteTree(newmol) ) )*\
}

def stateStepIsoCheck(level:int) { false }
def stateStepIsoCheck(level:int) {\
	if{{level < ::stopLevel};\
		molecules:set<Molecule>=set<Molecule>{} ;> [collectMolecule(molecules)]\
		;> << (mol1:Molecule,mol2:Molecule)=amideFormation(molecules) ;; addReactionResultsIfNotYetExisting(mol1) ;> addReactionResultsIfNotYetExisting(mol2) ;> false >>\
		;> ::replaceThisPlaceholderBySomeOtherRulesInBacktrackingAnglesReplicatingResultsInBacktrackingPauses\
		;> stateStepIsoCheck(level+1);\
		i:int=0 ;> for{m:Molecule in nodes(Molecule); {adj:set<Node>=adjacentOutgoing(m, contains); sub:graph=inducedSubgraph(adj); export(sub, "statespaceChemistry/molecule"+i+".grsi"); i=i+1}}\
	}\
}

exec ::i=0 ;> ::stopLevel=2 ;> stateStepIsoCheck(0)

#show graph ycomp
#show graph ycomp.bat

show num edges
show num edges contains
show num nodes
show num nodes Atom
show num nodes H
show num nodes C
show num nodes N
show num nodes O
show num nodes S
show num nodes Molecule

quit
