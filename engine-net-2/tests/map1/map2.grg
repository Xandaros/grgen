using map1;

rule addNode
{
	modify
	{
		a:A;
	}
}

rule removeIntKey(var key:int)
{
	a:A;

	if { key in a.m; }

	modify
	{
		eval
		{
			a.m = a.m \ set<string>{ key };
		}
	}
}

rule removeStringKey(var key:string)
{
	a:A;

	if { key in a.m; }

	modify
	{
		eval
		{
			a.m = a.m \ { key };
		}
	}
}

rule insertIntKey(var key:int, var value:int)
{
	a:A;

	modify
	{
		eval
		{
			a.m = a.m | map<string,int>{ key->value };
		}
	}
}

rule insertIntKeyIfNotExists(var key:int, var value:int)
{
	a:A;

	if { !(key in a.m); }

	modify
	{
		eval
		{
			a.m = a.m | map<string,int>{ key->value };
		}
	}
}

rule insertStringKey(var key:string, var value:int)
{
	a:A;

	modify
	{
		eval
		{
			a.m = a.m | { key->value };
		}
	}
}

rule getIntValue(var key:int):(int)
{
	a:A;

	modify {
		return(a.m[key]);
	}
}

rule dumpIntValue(var key:int)
{
	a:A;

    if { key in a.m; }

    modify {
        emit("1 value of attribute 5 6 " + a.m[key] + "\n");
    }
}

rule insertStringKeyIfEmpty(var key:string, var value:int)
{
	a:A;

	if { a.m.size() == 0; }

	modify
	{
		eval
		{
			a.m = a.m | { key->value };
		}
	}
}
