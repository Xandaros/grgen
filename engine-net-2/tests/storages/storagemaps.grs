new graph storages/storages

xgrs st1=map<Node,Edge>{}
xgrs {sz=st1.size()}
show var sz
show num nodes
show num edges

xgrs ( (n)=addNode ;> (e)=addReflexiveEdge(n) ;> {st1.add(n,e)} )[5]
xgrs {sz=st1.size()}
show var sz
show num nodes
show num edges

xgrs (n)=pickNode
xgrs {r=n in st1}
show var r
xgrs {e=st1[n]}
#e.id = 42
xgrs (e)=getReflexiveEdge(n)
#e.id

xgrs for{n->e in st1; {e=st1[n]} ;> remEdge(e)}
xgrs {sz=st1.size()}
show var sz
show num nodes
show num edges

xgrs for{n->e in st1; remNode(n)}
xgrs {sz=st1.size()}
show var sz
show num nodes
show num edges

xgrs {st1.clear()}
xgrs {sz=st1.size()}
show var sz

xgrs ( (n)=addNode ;> (e)=addReflexiveEdge(n) ;> {st1.add(n,e)} )[5]
xgrs {sz=st1.size()}
show var sz
show num nodes
show num edges

xgrs (n)=pickNode
xgrs {r=n in st1}
show var r
xgrs {e=st1[n]}
#e.id = 42
xgrs (e)=getReflexiveEdge(n)
#e.id

xgrs for{n->e in st1; remEdge(e)}
xgrs {sz=st1.size()}
show var sz
show num nodes
show num edges

xgrs st2=map<Node,Edge>{}
xgrs for{n->e in st1; {st2.add(n,e)}}
xgrs {sz=st1.size()}
show var sz
xgrs {sz=st2.size()}
show var sz

xgrs for{n in st2; {st1.rem(n)}}
xgrs {sz=st1.size()} ;> {emit("value of variable 4 5 6 7 8 9 ")} ;> {emit(sz)} ;> {emit("\n")}
xgrs {s=st1.size()}
show var s
xgrs {sz=st2.size()} ;> {emit("value of variable 4 5 6 7 8 9 ")} ;> {emit(sz)} ;> {emit("\n")}
xgrs {s=st2.size()}
show var s
xgrs {s=st2.empty()}
show var s
xgrs {st2.clear()}
xgrs {sz=st2.size()} ;> {emit("value of variable 4 5 6 7 8 9 ")} ;> {emit(sz)} ;> {emit("\n")}
xgrs {s=st2.size()}
show var s
xgrs {s=st2.empty()}
show var s

quit
