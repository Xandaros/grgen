using from_storage;

rule r1(ref m:map<Edge,Edge>)
{
	-e:Edge<m[f]>-> . -f:Edge-> l:Node;
	
	modify {
		delete(l);
	}
}

rule r3(ref m:map<E,E>)
{
	-e:EE<m[f]>-> . -f:EE-> l:NN;
	
	modify {
		delete(l);
	}
}

rule r6(ref m:map<N,E>)
{
	-n:EE<m[l]>-> . -f:EE-> l:NN;
	
	modify {
		delete(l);
	}
}

rule r8(ref m:map<Edge,Edge>, -x:Edge->)
{
	hom(x,y);
	-e:Edge<m[x]>-> . -y:Edge-> l:Node;
	
	modify {
		delete(l);
	}
}

rule r8b(ref m:map<Edge,Edge>, -x:Edge->)
{
	hom(x,y);
	<-e:Edge<m[x]>-> . -y:Edge-> l:Node;
	
	modify {
		delete(l);
	}
}

rule r10(ref m:map<E,UEdge>)
{
	. -e:G<m[f]>- . -f:EE-> l:Node;
	
	modify {
		delete(l);
	}
}
