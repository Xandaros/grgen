using storages;

rule addNode(ref st:set<Node>)
{
	nn:NN;
	modify {
		eval {
			st.add(nn);
		}
	}
}

rule remNode(ref st:set<Node>)
{
	nnn:NNN;
	modify {
		eval {
			st.rem(nnn);
		}
	}
}

rule addNodeIfOtherContained(ref st:set<Node>, nn:NN)
{
	nnn:NNN;
	if { nn in st; }
	
	modify {
		eval {
			st.add(nnn);
		}
	}
}

rule remNodeGiven(ref st:set<Node>, nn:NN)
{
	modify {
		eval {
			st.rem(nn);
		}
	}
}


rule addNodeEdge(ref st:map<Node, Edge>)
{
	nn:NN -ee:EE-> nn; 
	modify {
		eval {
			st.add(nn, ee);
		}
	}
}

rule remNodeEdge(ref st:map<Node, Edge>)
{
	nnn:NNN -eee:EEE-> nnn;
	modify {
		eval {
			st.rem(nnn);
		}
	}
}

rule addNodeEdgeIfOtherNodeContained(ref st:map<Node,Edge>, nn:NN)
{
	nnn:NNN -eee:EEE-> nnn;
	if { nn in st; }
	
	modify {
		eval {
			st.add(nnn, eee);
		}
	}
}

rule remNodeEdgeGiven(ref st:map<Node,Edge>, nn:NN)
{
	modify {
		eval {
			st.rem(nn);
		}
	}
}

rule addNodeEdgeIfOtherNodeEdgeContained(ref st:map<Node,Edge>, nn:NN, -ee:EE->)
{
	nnn:NNN -eee:EEE-> nnn;
	if { st[nn] == ee; }
	
	modify {
		eval {
			st.add(nnn, eee);
		}
	}
}


rule addToArray(ref st:array<Node>)
{
	nn:NN;
	modify {
		eval {
			st.add(nn);
		}
	}
}

rule insertAtIndex(ref st:array<Node>, var index_:int)
{
	nn:NN;
	modify {
		eval {
			st.add(nn, index_);
		}
	}
}

rule remFromArray(ref st:array<Node>)
{
	nnn:NNN;
	modify {
		eval {
			st.rem(st.indexOf(nnn));
		}
	}
}

rule remFromArrayNodeGiven(ref st:array<Node>, nn:NN)
{
	modify {
		eval {
			st.rem(st.indexOf(nn));
		}
	}
}

rule addNodeIfOtherContainedArray(ref st:array<Node>, nn:NN)
{
	nnn:NNN;
	if { nn in st; }
	
	modify {
		eval {
			st.add(nnn);
		}
	}
}


rule addToDeque(ref st:deque<Node>)
{
	nn:NN;
	modify {
		eval {
			st.add(nn);
		}
	}
}

rule insertAtIndexDeque(ref st:deque<Node>, var index_:int)
{
	nn:NN;
	modify {
		eval {
			st.add(nn, index_);
		}
	}
}

rule remFromDeque(ref st:deque<Node>)
{
	nnn:NNN;
	modify {
		eval {
			st.rem(st.indexOf(nnn));
		}
	}
}

rule remFromDequeNodeGiven(ref st:deque<Node>, nn:NN)
{
	modify {
		eval {
			st.rem(st.indexOf(nn));
		}
	}
}

rule addNodeIfOtherContainedDeque(ref st:deque<Node>, nn:NN)
{
	nnn:NNN;
	if { nn in st; }
	
	modify {
		eval {
			st.add(nnn);
		}
	}
}
