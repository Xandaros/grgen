using containertransaction;

rule transform1 {
	a:N;
	if{ "foo" in a.setVal; }
	if{ "foo" in a.mapVal; }
	if{ "foo" in a.arrayVal; }
	if{ "foo" in a.dequeVal; }
	
	modify {
		eval {
			a.setVal = a.setVal \ set<string>{ "foo" };
			a.setVal = a.setVal | set<string>{ "bar" };
			a.mapVal = a.mapVal \ set<string>{ "foo" };
			a.mapVal = a.mapVal | map<string,string>{ "bar"->"foo" };
			a.arrayVal = a.arrayVal + array<string>[ "bar" ];
			a.dequeVal = a.dequeVal + deque<string>] "bar" [;
		}
	}
}

rule transform2 {
	a:N;
	if{ "foo" in a.setVal; }
	if{ "foo" in a.mapVal; }
	if{ "foo" in a.arrayVal; }
	if{ "foo" in a.dequeVal; }
	
	modify {
		eval {
			a.setVal = a.setVal2;
			a.mapVal = a.mapVal2;
			a.arrayVal = a.arrayVal2;
			a.dequeVal = a.dequeVal2;
		}
	}
}

test fail {
	a:N;
	if{ "foo" in a.setVal; }
}
