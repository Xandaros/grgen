new graph "porter/porter"

# begin of graph "DefaultGraph" saved by GrsExport

new :Node($ = "node0")
new :N2a($ = "node1", foo = 42)
new :N2b($ = "node2", bar = "Weltherrschaft!")
new :N3($ = "node3", bla = 42)
new :N4($ = "node4", foo = 3, bar = "n3", bla = 2.718281828, huh = True, lal = Bla::Reh)
new :N4($ = "node5", foo = 2, bar = "n2", bla = 4, huh = False, lal = Bla::Reh)
new :N4($ = "node6", foo = 1, bar = "n1", bla = 3.141592654, huh = True, lal = Bla::Lamm)
# total number of nodes: 7

new @("node3") - :E2b($ = "edge7", bar = "haha") -> @("node2")
new @("node3") - :E3($ = "edge8", bla = 42f) -> @("node3")
new @("node3") - :E2a($ = "edge9", foo = 42) -> @("node1")
new @("node4") - :E4($ = "edgeA", foo = 31, bar = "n3->n1", bla = 3.141593f, huh = True, lal = Bla::Reh) -> @("node6")
new @("node5") - :E4($ = "edgeB", foo = 23, bar = "n2->n3", bla = 23f, huh = False, lal = Bla::Reh) -> @("node4")
new @("node6") - :E4($ = "edgeC", foo = 0xC, bar = "n1->n2", bla = 12f, huh = True, lal = Bla::Hurz) -> @("node5")
new @("node6") - :Edge($ = "edgeD") -> @("node0")
# total number of edges: 7

# end of graph "DefaultGraph" saved by GrsExport

xgrs [checkForTestGraph]
xgrs printNames

export porter/testgraph.grs

import porter/testgraph.grs porter/porter.gm

select actions porter/lgsp-porterActions.dll

xgrs [checkForTestGraph]
xgrs printNames

# the test script tries to test all available .grs; no sense in trying to test the exported graph
!rm porter/testgraph.grs

quit
