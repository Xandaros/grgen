new graph nestedGraphs/nested

include nestedGraphs/nestedlayout.grsi

# build rgb-triangle graph, use induced and export/import to fill sub in all of the nodes with the same subgraph
exec (gr:set<Node>)=init ;> (r:RedGraph)=red ;> (g:GreenGraph)=green ;> (b:BlueGraph)=blue ;> {\
File::export("redgreenblue.grs");\
sub:graph = inducedSubgraph(gr);\
File::export(sub, "redgreenblue2.grs");\
r.sub = File::import("redgreenblue.grs");\
g.sub = sub;\
b.sub=File::import("redgreenblue2.grs");\
File::export("redgreenbluefull.grs");\
{r.sub==g.sub && g.sub==b.sub}\
}

# ensure that the subgraphs in the nodes of the main graph are not equal to the main graph (cause their sub-attributes are null)
exec (r:RedGraph)=red ;> (g:GreenGraph)=green ;> (b:BlueGraph)=blue ;> {\
sub:graph = File::import("redgreenbluefull.grs");\
{sub!=r.sub && sub!=g.sub && sub!=b.sub}\
}

# descend to r and g subgraphs, importing a rgb-graph to the sub attribute of r
# ensure the imports are isomorphy, and different from the b subgraph which should be null
exec (r:RedGraph)=red ;> (g:GreenGraph)=green ;> (b:BlueGraph)=blue ;>\
rr:RedGraph ;> in r.sub { (rr)=red ;> { rr.sub = File::import("redgreenblue.grs")} } ;>\
gr:RedGraph ;> in g.sub { (gr)=red ;> { gr.sub = File::import("redgreenblue.grs")} } ;>\
br:RedGraph ;> in b.sub { (br)=red } ;>\
{ File::export("redgreenbluefull2.grs");\
{rr.sub == gr.sub && r.sub == g.sub && rr.sub != br.sub && br.sub == null && r.sub != b.sub} }

# create copy of current main graph, ensure the copy is isomorph to current main graph
exec { clone:graph=copy(this); full:graph=File::import("redgreenbluefull2.grs"); initial:graph=File::import("redgreenblue.grs");\
{this==clone && this==full && this!=initial} }

# descend to g and b subgraphs, change their contained rgb-graph in different ways
# now all subgraphs must be different from each other (r still containing the imported pure rgb-subgraph)
# set additionally b/red.sub to g/red.sub so they are equal
exec (r:RedGraph)=red ;> (g:GreenGraph)=green ;> (b:BlueGraph)=blue ;>\
rsub:graph ;> gsub:graph ;> bsub:graph ;> { rsub=r.sub; gsub=g.sub; bsub=b.sub } ;>\
attr:graph ;> in gsub { (gg:GreenGraph)=green ;> { rem(gg) } ;> (gr:RedGraph)=red ;> { attr=gr.sub } } ;>\
in bsub { (bb:BlueGraph)=blue ;> { (bb2:BlueGraph)=add(BlueGraph); add(Edge, bb, bb2) } ;> blueblue() ;> (br:RedGraph)=red ;> { br.sub=attr } } ;>\
{ File::export("redgreenbluefull3.grs");\
{rsub != gsub && gsub != bsub && rsub != bsub && this != File::import("redgreenbluefull2.grs")} }

# descend to g and b subgraphs, change them now so that each contains the previous change to the other
# now the g and b subgraphs must be isomorph again
exec (r:RedGraph)=red ;> (g:GreenGraph)=green ;> (b:BlueGraph)=blue ;>\
rsub:graph ;> gsub:graph ;> bsub:graph ;> { rsub=r.sub; gsub=g.sub; bsub=b.sub } ;>\
in gsub { (bb:BlueGraph)=blue ;> { (bb2:BlueGraph)=add(BlueGraph); add(Edge, bb, bb2) } ;> blueblue() } ;>\
in bsub { remGreen } ;>\
{ File::export("redgreenbluefull4.grs");\
{gsub == bsub && rsub != gsub && rsub != bsub && this != File::import("redgreenbluefull3.grs") && this == File::import("redgreenbluefull4.grs")} }

exit
