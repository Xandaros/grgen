function setExample(ref si:set<int>) : boolean
{
	def ref s:set<int> = set<int>{};
	s.add(1); // { 1 }
	s.add(2); // { 1, 2 }
	s.add(3); // { 1, 2, 3 }, s.size()==3
	s.rem(2); // { 1, 3 }
	for(v:int in s) {
		si.add(v);
	} // s == si == { 1, 3 }, assuming input was {}
	def var i:int = s.size(); // i==2
	if(!(i in s)) { 
		s.add(i);
	} // { 1, 2, 3 }
	s.add(3); // still { 1, 2, 3 }
	return (2 in (s | set<int>{ 4,5 })); // true
}

function mapExample(ref mi:map<int,int>) : boolean
{
	def ref m:map<int,int> = map<int,int>{};
	m.add(1,1); // { 1->1 }
	m.add(2,2); // { 1->1, 2->2 }
	m.add(3,3); // { 1->1, 2->2, 3->3 }, m.size()==3
	m.rem(2); // { 1->1, 3->3 }
	for(k:int -> v:int in m) {
		mi.add(k,v); // mi[k] == m[k]
	} // m == mi == { 1->1, 3->3 }, assuming input was {->}
	m[3] = m[1]; // m = { 1->1, 3->1 }
	def var i:int = m.size(); // i==2
	if(!(i in m)) { 
		m.add(i, 1);
	} // { 1->1, 2->1, 3->1 }
	m.add(3, 3); // { 1->1, 2->1, 3->3 }
	return (2 in (m | map<int,int>{ 4->4, 5->m[0] })); // true
}

function arrayExample(ref ai:array<int>) : boolean
{
	def ref a:array<int> = array<int>[];
	a.add(1); // [ 1 ]
	a.add(2); // [ 1, 2 ]
	a.add(3); // [ 1, 2, 3 ], a.size()==3
	def var tmp:int = a.peek(); // end of [ 1, 2, 3 ] is 3 
	a.rem(); // [ 1, 2 ] FIFO
	for(k:int -> v:int in a) {
		ai.add(v); // ai[k] == a[k]
	} // a == ai == [ 1, 2 ], assuming input was []
	def var i:int = a.indexOf(2);
	if(i != -1) { // a[i]==2
		a[i] = 3;
	} // [ 1, 3 ]
	a.add(2, 1); // [ 1, 2, 3 ]
	return (2 in a + array<int>[ 4, 5 ]); // true
}

function dequeExample(ref di:deque<int>) : boolean
{
	def ref d:deque<int> = deque<int>][;
	d.add(1); // ] 1 [
	d.add(2); // ] 1, 2 [
	d.add(3); // ] 1, 2, 3 [, d.size()==3
	def var tmp:int = d.peek(); // begin of ] 1, 2, 3 [ is 1 
	d.rem(); // ] 2, 3 [ LIFO
	for(k:int -> v:int in d) {
		di.add(v); // di[k] == d[k]
	} // d == di == ] 2, 3 [, assuming input was ][
	def var i:int = d.indexOf(2);
	if(i != -1) {
		d[i] = 1;
	} // ] 1, 3 [
	d.add(2, 1); // ] 1, 2, 3 [
	return (2 in d + deque<int>] 4, 5 [); // true
}
