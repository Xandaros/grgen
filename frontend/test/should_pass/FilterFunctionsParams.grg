rule filterBase
{
	def var i:int;

	n:Node;

	yield {
		yield i = incident(n).size();
	}
	
	modify{
	}
} \ auto, orderAscendingBy<i>

filter fBase<filterBase>(var x:int)
{
	for(m:match<filterBase> in this)
	{
		m.i = incident(m.n).size();
	}
	for(m:match<filterBase> in this)
	{
		m.i = m.i + adjacent(m.n).size() + x;
	}
	this.add(copy(this.peek()));
	this.add(copy(this.peek()), x);
	this.rem(x);
	this.rem();
	this[x] = this[x];
//	this[0].i = incident(this[i].n).size(); // first index access then member access is not allowed, must be mapped to an assignment of a local variable
	def ref mi:match<filterBase> = this[0];
	mi.i = this[1].i + mi.i;
}

rule filterBass
{
	def var d:double;
	
	n:Node --> n;

	yield {
		yield d = incident(n).size() * 3.141592654;
	}
	
	modify {
	}
} \ orderAscendingBy<d>, keepSameAsFirst<d>

filter fBass<filterBass>(var y:double)
{
}

test filterHass(n:Node):(Edge)
{
	def var s:string;

	n -e:Edge-> n;
	
	yield {
		yield s = incident(n).size() > 1 ? "foo" : "fool";
	}

	return(e);
}

filter fHass<filterHass>(var x:int, var y:double, var z:string, var c:int)
{
}

rule init : (Node)
{
	replace {
		n1:Node --> n1 --> n1;
		n2:Node --> n2;
		return(n1);
	}
}

rule r
{
	n:Node -e:Edge-> n;
	def var x:int = 1;

	modify {
		m:Node;
		def var y:double = 42.0;

		exec(z:string="foo" ;> filterBase\orderAscendingBy<i>\keepFirst(3)
				;> filterBase\fBase(x)
				;> [filterBass\orderAscendingBy<d>\keepSameAsFirst<d>]
				;> $::x[filterBass\fBass(42.0)]
				;> (::ee)=filterHass(::n)
				;> ${<filterHass(::n)\fHass(x,y,z,3),[filterHass(::n)\fHass(x,y,z,3)]>}
		);
	}
}
