using model_init;

foo() : set<Node>
{
	def res1:Node = add(Node);
	def res2:A = add(A);
	def -res3:Edge-> = add(Edge, res1, res2);
	def -res4:E1-> = add(E1, res2, res1);
	def res1b:Node = retype(res2, Node);
	def res2b:A = retype(res1, A);
	def -res3b:Edge-> = retype(res4, Edge);
	def -res4b:E1-> = retype(res3, E1);

	return( set<Node>{add(Node), add(A)} );
}

rule r()
{
	modify {
		def ref res:set<Node>;
		
		eval { 
			def res1:Node = add(Node);
			def res2:A = add(A);
			def -res3:Edge-> = add(Edge, res1, res2);
			def -res4:E1-> = add(E1, res2, res1);
			def res1b:Node = retype(res2, Node);
			def res2b:A = retype(res1, A);
			def -res3b:Edge-> = retype(res4, Edge);
			def -res4b:E1-> = retype(res3, E1);

			yield res = foo() | { add(Node) };
		}
	}
}
