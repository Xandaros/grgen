using model_init;

foo() : set<Node>
{
	def res1:Node;
	(res1) = add(Node);
	def res2:A;
	(res2) = add(A);
	def -res3:Edge->;
	(res3) = add(Edge, res1, res2);
	def -res4:E1->;
	(res4) = add(E1, res2, res1);
	def res1b:Node;
	(res1b) = retype(res2, Node);
	def res2b:A;
	(res2b) = retype(res1, A);
	def -res3b:Edge->;
	(res3b) = retype(res4, Edge);
	def -res4b:E1->;
	(res4b) = retype(res3, E1);

	return( set<Node>{res1, res2} );
}

rule r()
{
	modify {
		def ref res:set<Node>;
		
		eval { 
			def res1:Node;
			(res1) = add(Node);
			def res2:A;
			(res2) = add(A);
			def -res3:Edge->;
			(res3) = add(Edge, res1, res2);
			def -res4:E1->;
			(res4) = add(E1, res2, res1);
			def res1b:Node;
			(res1b) = retype(res2, Node);
			def res2b:A;
			(res2b) = retype(res1, A);
			def -res3b:Edge->;
			(res3b) = retype(res4, Edge);
			def -res4b:E1->;
			(res4b) = retype(res3, E1);

			yield res = foo() | { res1 };
		}
	}
}
