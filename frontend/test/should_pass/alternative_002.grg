using attrib_model_001;

rule r {
	x:NINT;
	alternative {
		blub {
			modify {
				x --> x;
			}
		}
		bla {
			modify {
				x --> y:NINT;
				eval {
					y.a = x.a; // x only referenced in eval -- must be propagated internally into bla lhs 
				}
			}
		}
	}
	
	modify {
	}
}

test t(var x:int) {
	alternative {
		blub {
			if { x!=42; } // x only referenced in if  -- must be propagated internally into blub lhs
		}
	}	
}

pattern Alts(var i:int, var j:string, var k:boolean, var l:double, var m:object) 
		modify(var mi:int, var mj:string, var mk:boolean, var ml:double, var mm:object)
{
	alternative {
		foo {
			nint:NINT;
			nbool:NBOOL;
			ndouble:NDOUBLE;
			nobject:NOBJECT;
			nstring:NSTRING;
			modify {
				eval {
					nint.a = mi + i; // var parameters only referenced in eval -- msut be propagated internally to foo lhs
					nbool.a = mk || k;
					ndouble.a = ml - l;
					nobject.a = mm!=null ? mm : m;
					nstring.a = mj + j;
				}
			}
		}
		bar {
			modify {
				nint:NINT;
				nbool:NBOOL;
				ndouble:NDOUBLE;
				nobject:NOBJECT;
				nstring:NSTRING;
				eval {
					nint.a = mi;
					nbool.a = mk;
					ndouble.a = ml;
					nobject.a = mm;
					nstring.a = mj;
				}
			}
		}
	}
	
	modify {
	}
}
