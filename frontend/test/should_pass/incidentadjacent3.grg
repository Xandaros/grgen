::g_n:Node;
-::g_e:Edge->;
::g_m:Node;

rule t
{
	n:Node -e:Edge-> m:Node;

	if { edges(Edge).size()!=0; }
	if { nodes(Node).size()!=0; }

	if { source(e)!=n; }
	if { source(::g_e)!=::g_n; }
	if { target(e)!=n; }
	if { target(::g_e)!=::g_n; }
	
	if { incident(::g_n, Edge, Node).size()!=0 && incoming(::g_n, Edge, Node).size()!=0 && outgoing(::g_n, Edge, Node).size()!=0; }
	if { incident(n, Edge, Node).size()!=0 && incoming(n, Edge, Node).size()!=0 && outgoing(n, Edge, Node).size()!=0; }
	if { adjacent(::g_n, Edge, Node).size()!=0 && adjacentIncoming(::g_n, Edge, Node).size()!=0 && adjacentOutgoing(::g_n, Edge, Node).size()!=0; }
	if { adjacent(n, Edge, Node).size()!=0 && adjacentIncoming(n, Edge, Node).size()!=0 && adjacentOutgoing(n, Edge, Node).size()!=0; }
	
	if { reachableEdges(::g_n, Edge, Node).size()!=0 && reachableEdgesIncoming(::g_n, Edge, Node).size()!=0 && reachableEdgesOutgoing(::g_n, Edge, Node).size()!=0; }
	if { reachableEdges(n, Edge, Node).size()!=0 && reachableEdgesIncoming(n, Edge, Node).size()!=0 && reachableEdgesOutgoing(n, Edge, Node).size()!=0; }
	if { reachable(::g_n, Edge, Node).size()!=0 && reachableIncoming(::g_n, Edge, Node).size()!=0 && reachableOutgoing(::g_n, Edge, Node).size()!=0; }
	if { reachable(n, Edge, Node).size()!=0 && reachableIncoming(n, Edge, Node).size()!=0 && reachableOutgoing(n, Edge, Node).size()!=0; }
	if { isReachable(::g_n, ::g_m, Edge, Node) && isReachableIncoming(::g_n, ::g_m, Edge, Node) && isReachableOutgoing(::g_n, ::g_m, Edge, Node); }
	if { isReachable(n, m, Edge, Node) && isReachableIncoming(n, m, Edge, Node) && isReachableOutgoing(n, m, Edge, Node); }
	
	modify {
		def var res:boolean;
		
		eval { yield res = edges(Edge).size()!=0; }
		eval { yield res = nodes(Node).size()!=0; }

		eval { yield res = source(e)!=n; }
		eval { yield res = source(::g_e)!=::g_n; }
		eval { yield res = target(e)!=n; }
		eval { yield res = target(::g_e)!=::g_n; }
		
		eval { yield res = incident(::g_n, Edge, Node).size()!=0 && incoming(::g_n, Edge, Node).size()!=0 && outgoing(::g_n, Edge, Node).size()!=0; }
		eval { yield res = incident(n, Edge, Node).size()!=0 && incoming(n, Edge, Node).size()!=0 && outgoing(n, Edge, Node).size()!=0; }
		eval { yield res = adjacent(::g_n, Edge, Node).size()!=0 && adjacentIncoming(::g_n, Edge, Node).size()!=0 && adjacentOutgoing(::g_n, Edge, Node).size()!=0; }
		eval { yield res = adjacent(n, Edge, Node).size()!=0 && adjacentIncoming(n, Edge, Node).size()!=0 && adjacentOutgoing(n, Edge, Node).size()!=0; }
		
		eval { yield res = reachableEdges(::g_n, Edge, Node).size()!=0 && reachableEdgesIncoming(::g_n, Edge, Node).size()!=0 && reachableEdgesOutgoing(::g_n, Edge, Node).size()!=0; }
		eval { yield res = reachableEdges(n, Edge, Node).size()!=0 && reachableEdgesIncoming(n, Edge, Node).size()!=0 && reachableEdgesOutgoing(n, Edge, Node).size()!=0; }
		eval { yield res = reachable(::g_n, Edge, Node).size()!=0 && reachableIncoming(::g_n, Edge, Node).size()!=0 && reachableOutgoing(::g_n, Edge, Node).size()!=0; }
		eval { yield res = reachable(n, Edge, Node).size()!=0 && reachableIncoming(n, Edge, Node).size()!=0 && reachableOutgoing(n, Edge, Node).size()!=0; }
		eval { yield res = isReachable(::g_n, ::g_m, Edge, Node) && isReachableIncoming(::g_n, ::g_m, Edge, Node) && isReachableOutgoing(::g_n, ::g_m, Edge, Node); }
		eval { yield res = isReachable(n, m, Edge, Node) && isReachableIncoming(n, m, Edge, Node) && isReachableOutgoing(n, m, Edge, Node); }
	
/*
		exec ( { res = edges(Edge).size()!=0; } )
		exec ( { res = nodes(Node).size()!=0; } )

		exec ( { res = source(e)!=n; } )
		exec ( { res = source(::g_e)!=::g_n; } )
		exec ( { res = target(e)!=n; } )
		exec ( { res = target(::g_e)!=::g_n; } )
		
		exec ( { res = incident(::g_n, Edge, Node).size()!=0 && incoming(::g_n, Edge, Node).size()!=0 && outgoing(::g_n, Edge, Node).size()!=0; } )
		exec ( { res = incident(n, Edge, Node).size()!=0 && incoming(n, Edge, Node).size()!=0 && outgoing(n, Edge, Node).size()!=0; } )
		exec ( { res = adjacent(::g_n, Edge, Node).size()!=0 && adjacentIncoming(::g_n, Edge, Node).size()!=0 && adjacentOutgoing(::g_n, Edge, Node).size()!=0; } )
		exec ( { res = adjacent(n, Edge, Node).size()!=0 && adjacentIncoming(n, Edge, Node).size()!=0 && adjacentOutgoing(n, Edge, Node).size()!=0; } )
		
		exec ( { res = reachableEdges(::g_n, Edge, Node).size()!=0 && reachableEdgesIncoming(::g_n, Edge, Node).size()!=0 && reachableEdgesOutgoing(::g_n, Edge, Node).size()!=0; } )
		exec ( { res = reachableEdges(n, Edge, Node).size()!=0 && reachableEdgesIncoming(n, Edge, Node).size()!=0 && reachableEdgesOutgoing(n, Edge, Node).size()!=0; } )
		exec ( { res = reachable(::g_n, Edge, Node).size()!=0 && reachableIncoming(::g_n, Edge, Node).size()!=0 && reachableOutgoing(::g_n, Edge, Node).size()!=0; } )
		exec ( { res = reachable(n, Edge, Node).size()!=0 && reachableIncoming(n, Edge, Node).size()!=0 && reachableOutgoing(n, Edge, Node).size()!=0; } )
		exec ( { res = isReachable(::g_n, ::g_m, Edge, Node) && isReachableIncoming(::g_n, ::g_m, Edge, Node) && isReachableOutgoing(::g_n, ::g_m, Edge, Node); } )
		exec ( { res = isReachable(n, m, Edge, Node) && isReachableIncoming(n, m, Edge, Node) && isReachableOutgoing(n, m, Edge, Node); } )
*/
	}
}
