using storages;

rule r(p : Node) : (Node)
{
	l:Node;

	modify {
		x:Node;
		return (x);

		exec(r(p) ;> r(l) <; r(x));

		exec(if{r(p); r(l); r(x)});
		exec(if{r(p); r(l)});

		exec(
			st1:set<Node> = set<Node>{} ;> ( (n:Node)=addNode ;> st1.add(n) )[5] ;> for{n in st1; addReflexiveEdge(n)}
			;> for{n in st1; remNode(n)} ;> st2:set<Node> = set<Node>{} ;> for{n in st1; st2.add(n)} ;> st2.add(n)
			;> for{n in st2; st1.rem(n)} ;> st1.rem(n) ;> for{n in st2; st1.rem(n)}
			;> s:int=st2.size() ;> st2.clear() ;> s=st2.size()
		);

		exec(
			st1:set<Node> = set<Node>{} ;> ( (n:Node)=addNode ;> st1.add(n) )[5] ;> st2:set<Edge> = set<Edge>{}
			;> for{n in st1; (e:Edge)=addReflexiveEdge(n) ;> st2.add(e)} ;> for{e in st2; isReflexiveEdge(e)}
			;> for{n in st1; exactlyOneReflexiveEdge(n)} ;> for{e in st2; remEdge(e)} ;> st3:set<Edge> = set<Edge>{}
			;> for{e in st2; st3.add(e)} ;> st3.add(e) ;> for{e in st3; st2.rem(e)}
			;> st2.rem(e) ;> for{e in st3; st2.rem(e)}
			;> s:int=st3.size() ;> st3.clear() ;> s=st3.size()
		);

		exec(
			st1:set<NN> = set<NN>{} ;> ( (n:NN)=addNodeNN ;> st1.add(n) )[5] ;> for{n in st1; addReflexiveEdge(n)}
			;> for{n in st1; remNode(n)} ;> st2:set<NN> = set<NN>{} ;> for{n in st1; st2.add(n)} ;> st2.add(n)
			;> for{n in st2; st1.rem(n)} ;> st1.rem(n) ;> for{n in st2; st1.rem(n)}
			;> s:int=st2.size() ;> st2.clear() ;> s=st2.size()
		);

		exec(
			st1:set<Node> = set<Node>{} ;> ( (n:Node)=addNode ;> st1.add(n) )[5] ;> st2:set<EE> = set<EE>{}
			;> for{n in st1; (e:EE)=addReflexiveEdgeEE(n) ;> st2.add(e)} ;> for{e in st2; isReflexiveEdge(e)}
			;> for{n in st1; exactlyOneReflexiveEdge(n)} ;> for{e in st2; remEdge(e)} ;> st3:set<EE> = set<EE>{}
			;> for{e in st2; st3.add(e)} ;> st3.add(e) ;> for{e in st3; st2.rem(e)}
			;> st2.rem(e) ;> for{e in st3; st3.rem(e)}
			;> s:int=st3.size() ;> st3.clear() ;> s=st3.size()
		);

		exec(
			st1:map<Node,Edge> = map<Node,Edge>{} ;> ( (n:Node)=addNode ;> (e:Edge)=addReflexiveEdge(n) ;> st1.add(n,e) )[5]
			;> (n)=pickNode ;> rb:boolean=(n in st1) ;> e=st1[n] ;> (e)=getReflexiveEdge(n)
			;> for{n->e in st1; e=st1[n] ;> remEdge(e)} ;> for{n->e in st1; remNode(n)} ;> st1.clear()
			;> ( (n)=addNode ;> (e)=addReflexiveEdge(n) ;> st1.add(n,e) )[5]
			;> (n)=pickNode ;> rb=(n in st1) ;> e=st1[n] ;> (e)=getReflexiveEdge(n)
			;> for{n->e in st1; remEdge(e)} ;> st2:map<Node,Edge> = map<Node, Edge>{}
			;> for{n->e in st1; st2.add(n,e)} ;> for{n in st2; st1.rem(n)} ;> s:int=st1.size() ;> s=st2.size()
			;> s=st2.size() ;> st2.clear() ;> s=st2.size() ;> s=st2.size()
		);

		exec(
			st1:map<NN,EE> = map<NN,EE>{} ;> ( (n:NN)=addNodeNN ;> (e:EE)=addReflexiveEdgeEE(n) ;> st1.add(n,e) )[5]
			;> st1b:map<Node,EE> = map<Node,EE>{} ;> (no:Node)=pickNode ;> rb:boolean=(no in st1b) ;> e=st1b[no] ;> (ed:Edge)=getReflexiveEdge(n)
			;> for{n->e in st1; e=st1[n] ;> remEdge(e)} ;> for{n->e in st1; remNode(n)} ;> st1.clear()
			;> ( (n)=addNodeNN ;> (e)=addReflexiveEdgeEE(n) ;> st1.add(n,e) )[5]
			;> (no)=pickNode ;> rb=(no in st1b) ;> e=st1b[no] ;> (ed)=getReflexiveEdge(n)
			;> for{n->e in st1; remEdge(e)} ;> st2:map<NN,EE> = map<NN,EE>{}
			;> for{n->e in st1; st2.add(n,e)} ;> for{n in st2; st1.rem(n)} ;> s:int=st1.size() ;> s=st2.size()
			;> s=st2.size() ;> st2.clear() ;> s=st2.size() ;> s=st2.size()
		);
	}
}

rule r2(-e:Edge->):(Edge) {
  modify {
    return(e);
    exec( (-x:Edge->)=r2(e) ;> ( (x)=r2(x) | if{?r2(x);r2(x);r2(e)} )[*] );
  }
}

rule addNode : (Node)
{
	modify {
		n:Node;
		return(n);
	}
}

test pickNode : (Node)
{
	 n:Node;
	 return(n);
}

test getReflexiveEdge(n:Node) : (Edge)
{
	n -e:Edge-> n;
	return(e);
}

rule addReflexiveEdge(n:Node) : (Edge)
{
	modify {
		n -e:Edge-> n;
		return(e);
	}
}

rule addNodeNN : (NN)
{
	modify {
		n:NN;
		return(n);
	}
}

rule addReflexiveEdgeEE(n:Node) : (EE)
{
	modify {
		n -e:EE-> n;
		return(e);
	}
}

exact test exactlyOneReflexiveEdge(n:Node)
{
	n --> n;
}

test isReflexiveEdge(-e:Edge->)
{
	n:Node -e-> n;
}

rule remNode(n:Node)
{
	replace {
	}
}

rule remEdge(-e:Edge->)
{
	replace {
	}
}

test forwardInt(var i:int) : (int)
{
	return(i);
}
