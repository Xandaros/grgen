foo(n1:Node, -e1:Edge->) : int
{
	def var res:int = 42;
	
	def var g1:graph = inducedSubgraph(adjacent(n1));
	def var g2:graph = definedSubgraph(incident(n1));
	def var s1:string = canonize(g1);
	def var s2:string = canonize(g2);
	
	return(res);
}

test t(n1:Node, -e1:Edge->) : (int)
{
	def var res:int = 42;
	
	independent {
		yield {
			def var g1:graph = inducedSubgraph(adjacent(n1));
			def var g2:graph = definedSubgraph(incident(n1));
			def var s1:string = canonize(g1);
			def var s2:string = canonize(g2);
		}
	}
	
	return (res);
}

rule r(n1:Node, -e1:Edge->) : (int)
{
	if(canonize(inducedSubgraph(adjacent(n1)))!="");
	
	modify {
		def var res:int = 42;
		
		eval { 
			def var g1:graph = inducedSubgraph(adjacent(n1));
			def var g2:graph = definedSubgraph(incident(n1));
			def var s1:string = canonize(g1);
			def var s2:string = canonize(g2);
		}
		
		return (res);
	}
}
