function foo() : double
{
	def var temp1:double = Math::pow(1.0, 1.0);
	def var temp1b:double = Math::pow(1.0);
	def var temp2:double = Math::log(1.0, Math::e());
	def var temp2b:double = Math::log(1.0);
	def var temp3:double = Math::abs(-1.0);
	def var temp3b:long = Math::abs(-1);
	def var temp4:double = Math::sgn(-1.0);
	return(temp1+temp2+temp3+temp4);
}

test t : (double)
{
	def var res:double;
	
	independent {
		yield {
			def var temp1:double = Math::pow(1.0, 1.0);
			def var temp1b:double = Math::pow(1.0);
			def var temp2:double = Math::log(1.0, Math::e());
			def var temp2b:double = Math::log(1.0);
			def var temp3:double = Math::abs(-1.0);
			def var temp3b:long = Math::abs(-1);
			def var temp4:double = Math::sgn(-1.0);
			yield res = temp1+temp2+temp3+temp4;
		}
	}
	
	return (res);
}

rule r : (double)
{	
	if(Math::pow(0.0)+Math::log(0.0) == Math::pow(0.0,0.0)+Math::log(0.0,Math::e()));
	if(Math::abs(-1)<Math::abs(-1.0));
	if(Math::sgn(-1.0)<Math::sgn(1.0));
	
	modify {
		def var res:double;
		
		eval {
			def var temp1:double = Math::pow(1.0, 1.0);
			def var temp1b:double = Math::pow(1.0);
			def var temp2:double = Math::log(1.0, Math::e());
			def var temp2b:double = Math::log(1.0);
			def var temp3:double = Math::abs(-1.0);
			def var temp3b:long = Math::abs(-1);
			def var temp4:double = Math::sgn(-1.0);
			yield res = temp1+temp2+temp3+temp4;
		}
		
		return (res);
	}
}
