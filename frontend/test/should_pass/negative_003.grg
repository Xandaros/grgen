pattern p {
	n1:Node -e1:Edge-> n2:Node;

	negative {
		n2-->n3:Node;

		negative {
			n3-->n2;
			n3-->n4:Node;
		}
	}
	negative {
		n2-->n3:Node;
	}
}

pattern pa {
	alternative {
		Something {
			n1:Node -e1:Edge-> n2:Node;

			negative {
				n2-->n3:Node;

				negative {
					n3-->n2;
					n3-->n4:Node;
				}
			}
			negative {
				n2-->n3:Node;
				alternative {
					Empty1 { }
					Empty2 { }
				}
			}
		}
		Empty {
		}
	}
}

rule r {
	n1:Node -e1:Edge-> n2:Node;

	negative {
		n2-->n3:Node;

		negative {
			n3-->n2;
			n3-->n4:Node;
		}
	}
	negative {
		n2-->n3:Node;
	}

	replace {
	}
}

test t {
	alternative {
		Something {
			n1:Node -e1:Edge-> n2:Node;

			negative {
				n2-->n3:Node;
				p1:p();

				negative {
					n3-->n2;
					n3-->n4:Node;
					p2:pa();
				}
			}
			negative {
				n2-->n3:Node;
			}
		}
		Empty {
		}
	}
}
