number(var x:int) : int
{
	def var res:int = 0;
	if(x==1) {
		res = 1;
	} else if(x==2) {
		res = 2;
	} else {
		res = 3;
	}
	return(res);
}

pattern P(var x:int, def var res:int) modify(var xx:int, def var resres:int)
{
	yield {
		if(x==1) {
			yield res = 1;
		} else if(x==2) {
			yield res = 2;
		} else {
			yield res = 3;
		}
	}
	
	modify {
		eval {
			if(x==1) {
				yield resres = 1;
			} else if(x==2) {
				yield resres = 2;
			} else {
				yield resres = 3;
			}			
		}
	}
}

test t(var x:int) : (int)
{
	return(number(x));
}

rule r(var x:int) : (int,int)
{
	if(number(x) < number(x+1));
	
	def var res:int;
	p:P(x, yield res);
	
	replace {
		def var resres:int;
		p(x, yield resres);
		return(res, resres);
	}	
}
