using model_init;

some(n:A, -e:E1->) : boolean
{
	def var by:byte = (byte)42;
	def var sh:short = (short)42;
	def var i1:int = 42;
	def var l:long = 0xdeadbeefl;
	def var f:float = 42.815f;
	def var s:string = "hello world";
	def var i2:int = i1 * (int)f;
	f = 42.815f;
	i2 = i1 * (int)f;
	def var b:boolean = true;
	def var enu:Foo = Foo::bar;

	return(n.b);
}

test t(n:A, -e:E1->) : (boolean)
{
	def var res:boolean;
	
	independent {
		yield {
			def var by:byte = (byte)42;
			def var sh:short = (short)42;
			def var i1:int = 42;
			def var l:long = 0xdeadbeefl;
			def var f:float = 42.815f;
			def var s:string = "hello world";
			def var i2:int = i1 * (int)f;
			f = 42.815f;
			i2 = i1 * (int)f;
			def var b:boolean = true;
			def var enu:Foo = Foo::bar;

			yield res = n.b;
		}
	}
	
	return (res);
}

rule r(n:A, -e:E1->, var x:int) : (boolean)
{	
	modify {
		def var res:boolean;

		eval { 
			def var by:byte = (byte)42;
			def var sh:short = (short)42;
			def var i1:int = 42;
			def var l:long = 0xdeadbeefl;
			def var f:float = 42.815f;
			def var s:string = "hello world";
			def var i2:int = i1 * (int)f;
			f = 42.815f;
			i2 = i1 * (int)f;
			def var b:boolean = true;
			def var enu:Foo = Foo::bar;

			yield res = n.b;
		}
		
		return (res);
	}
}

pattern P(var x:int, n:A, -e:E1->, def var res:int) modify(var xx:int, def var resres:int)
{
	independent {
		independent {
			yield {
				def var by:byte = (byte)42;
				def var sh:short = (short)42;
				def var i1:int = x;
				def var l:long = 0xdeadbeefl;
				def var f:float = 42.815f;
				def var s:string = "hello world";
				def var i2:int = i1 * (int)f;
				f = 42.815f;
				i2 = i1 * (int)f;
				def var b:boolean = true;
				def var enu:Foo = Foo::bar;

				yield res = n.i1 + i1;
			}
			yield {
				def var by:byte = (byte)42;
				def var sh:short = (short)42;
				def var i1:int = x;
				def var l:long = 0xdeadbeefl;
				def var f:float = 42.815f;
				def var s:string = "hello world";
				def var i2:int = i1 * (int)f;
				f = 42.815f;
				i2 = i1 * (int)f;
				def var b:boolean = true;
				def var enu:Foo = Foo::bar;

				yield res = n.i1 + i1;
			}
		}
	}
	
	modify {
		eval { 
			def var by:byte = (byte)42;
			def var sh:short = (short)42;
			def var i1:int = xx;
			def var l:long = 0xdeadbeefl;
			def var f:float = 42.815f;
			def var s:string = "hello world";
			def var i2:int = i1 * (int)f;
			f = 42.815f;
			i2 = i1 * (int)f;
			def var b:boolean = true;
			def var enu:Foo = Foo::bar;

			yield resres = n.i1 + i1;
		}
		eval { 
			def var by:byte = (byte)42;
			def var sh:short = (short)42;
			def var i1:int = xx;
			def var l:long = 0xdeadbeefl;
			def var f:float = 42.815f;
			def var s:string = "hello world";
			def var i2:int = i1 * (int)f;
			f = 42.815f;
			i2 = i1 * (int)f;
			def var b:boolean = true;
			def var enu:Foo = Foo::bar;

			yield resres = n.i1 + i1;
		}
	}
}
