::g_n:Node;
-::g_e:Edge->;
::g_m:Node;

rule t
{
	n:Node -e:Edge-> m:Node;

	if { edges(Edge).size()!=0; }
	if { nodes(Node).size()!=0; }
	
	if { incident(::g_n, Edge).size()!=0 && incoming(::g_n, Edge).size()!=0 && outgoing(::g_n, Edge).size()!=0; }
	if { incident(n, Edge).size()!=0 && incoming(n, Edge).size()!=0 && outgoing(n, Edge).size()!=0; }
	if { adjacent(::g_n, Edge).size()!=0 && adjacentIncoming(::g_n, Edge).size()!=0 && adjacentOutgoing(::g_n, Edge).size()!=0; }
	if { adjacent(n, Edge).size()!=0 && adjacentIncoming(n, Edge).size()!=0 && adjacentOutgoing(n, Edge).size()!=0; }
	
	if { isIncident(::g_n, ::g_e, Edge) && isIncoming(::g_n, ::g_e, Edge) && isOutgoing(::g_n, ::g_e, Edge); }
	if { isIncident(n, e, Edge) && isIncoming(n, e, Edge) && isOutgoing(n, e, Edge); }
	if { isAdjacent(::g_n, ::g_m, Edge) && isAdjacentIncoming(::g_n, ::g_m, Edge) && isAdjacentOutgoing(::g_n, ::g_m, Edge); }
	if { isAdjacent(n, m, Edge) && isAdjacentIncoming(n, m, Edge) && isAdjacentOutgoing(n, m, Edge); }
		
	modify {
		def var res:boolean;
		
		eval { yield res = edges(Edge).size()!=0; }
		eval { yield res = nodes(Node).size()!=0; }

		eval { yield res = incident(::g_n, Edge).size()!=0 && incoming(::g_n, Edge).size()!=0 && outgoing(::g_n, Edge).size()!=0; }
		eval { yield res = incident(n, Edge).size()!=0 && incoming(n, Edge).size()!=0 && outgoing(n, Edge).size()!=0; }
		eval { yield res = adjacent(::g_n, Edge).size()!=0 && adjacentIncoming(::g_n, Edge).size()!=0 && adjacentOutgoing(::g_n, Edge).size()!=0; }
		eval { yield res = adjacent(n, Edge).size()!=0 && adjacentIncoming(n, Edge).size()!=0 && adjacentOutgoing(n, Edge).size()!=0; }
	
		eval { yield res = isIncident(::g_n, ::g_e, Edge) && isIncoming(::g_n, ::g_e, Edge) && isOutgoing(::g_n, ::g_e, Edge); }
		eval { yield res = isIncident(n, e, Edge) && isIncoming(n, e, Edge) && isOutgoing(n, e, Edge); }
		eval { yield res = isAdjacent(::g_n, ::g_m, Edge) && isAdjacentIncoming(::g_n, ::g_m, Edge) && isAdjacentOutgoing(::g_n, ::g_m, Edge); }
		eval { yield res = isAdjacent(n, m, Edge) && isAdjacentIncoming(n, m, Edge) && isAdjacentOutgoing(n, m, Edge); }
	
/*
		exec ( { res = edges(Edge).size()!=0; } )
		exec ( { res = nodes(Node).size()!=0; } )

		exec ( { res = incident(::g_n, Edge).size()!=0 && incoming(::g_n, Edge).size()!=0 && outgoing(::g_n, Edge).size()!=0; } )
		exec ( { res = incident(n, Edge).size()!=0 && incoming(n, Edge).size()!=0 && outgoing(n, Edge).size()!=0; } )
		exec ( { res = adjacent(::g_n, Edge).size()!=0 && adjacentIncoming(::g_n, Edge).size()!=0 && adjacentOutgoing(::g_n, Edge).size()!=0; } )
		exec ( { res = adjacent(n, Edge).size()!=0 && adjacentIncoming(n, Edge).size()!=0 && adjacentOutgoing(n, Edge).size()!=0; } )
		
		exec ( { res = isIncident(::g_n, ::g_e, Edge) && isIncoming(::g_n, ::g_e, Edge) && isOutgoing(::g_n, ::g_e, Edge); } )
		exec ( { res = isIncident(n, e, Edge) && isIncoming(n, e, Edge) && isOutgoing(n, e, Edge); } )
		exec ( { res = isAdjacent(::g_n, ::g_m, Edge) && isAdjacentIncoming(::g_n, ::g_m, Edge) && isAdjacentOutgoing(::g_n, ::g_m, Edge); } )
		exec ( { res = isAdjacent(n, m, Edge) && isAdjacentIncoming(n, m, Edge) && isAdjacentOutgoing(n, m, Edge); } )
*/
	}
}
