using set_model_001;

rule addToSet {
	a:A;
	
	modify {
		eval {
			a.niceSet = a.niceSet | set<string>{ "yeah" };
			a.niceSet = a.niceSet | { "yeah" };
		}
	}
}

test containedInSet {
	a:A;
	
	if { "yeah" in a.niceSet; }
}

rule removeFromSet {
	a:A;
	
	modify {
		eval {
			a.niceSet = a.niceSet \ set<string>{ "yeah" };
			a.niceSet = a.niceSet \ { "yeah" };
		}
	}
}

rule computedAddToSet {
	a:A; b:A;
	
	modify {
		eval {
			a.spiceSet = a.spiceSet | set<int>{ a.val + b.val*2 };
			a.spiceSet = a.spiceSet | { a.val + b.val*2 };
		}
	}
}

test computedContainedInSet {
	a:A; b:A;
	
	if { a.val+b.val*2 in a.spiceSet; }
}

rule computedRemoveFromSet {
	a:A; b:A;
	
	modify {
		eval {
			a.spiceSet = a.spiceSet \ set<int>{ a.val + b.val*2 };
			a.spiceSet = a.spiceSet \ { a.val + b.val*2 };
		}
	}
}

rule emitFromSet {
	a:A;
	if { 5 in a.spiceSet; }
	
	modify {
		emit("is \"5\" contained? " + (5 in a.spiceSet ? "yes" : "no") + ", setsize = " + a.spiceSet.size());
	}
}

rule setVarContains(ref m:set<string>) {
	if { "yeah" in m; }
	
	modify {
		emit("\"yeah\" is contained? " + ("yeah" in m) + ", setsize = " + m.size());
	}
}

// This clones the sets
rule assignSetToSet {
	a:A -e:E-> a; 
		
	modify {
		eval {
			a.niceSet = e.niceSet;
			e.spiceSet = a.spiceSet;
			e.niceSet = a.niceSet;
		}
	}
}

rule useEnumSet {
	a:A -e:E-> a;

	if {
		et::a in e.enumSet;
		et::c in a.enumSet;
	}
	
	modify {
		eval {
			e.val = (et::b in a.enumSet) ? 7 : 19;
			a.val = (et::b in e.enumSet) ? 71 : 819;
		}
	}
}

test anonymousSet {
	a:A -e:E-> a;
	
	if { 
            a.val in set<int>{ 1, 3, 5, 7, 11, 13, 17 }
            && "blub" in set<string>{ "flap", "blab", "blub" }
		||
            e.strval in set<string>{ "foo", "bar", "blubb" }
            && 13 in set<int>{ 2, 4, 13, 19 }
		||
            14 in set<int>{ 2, 4, 13, 19 };
	}
	
	if { 
            a.val in { 1, 3, 5, 7, 11, 13, 17 }
            && "blub" in { "flap", "blab", "blub" }
		||
            e.strval in { "foo", "bar", "blubb" }
            && 13 in { 2, 4, 13, 19 }
		||
            14 in { 2, 4, 13, 19 };
	}
}

rule anonymousSetInRewrite {
	a:A -e:E-> a;

	modify {
		eval {
			a.val = (5 in set<int>{1,2,3,4,5}) ? 1 : 0;
			a.val = (5 in {1,2,3,4,5}) ? 1 : 0;
		}
	}
}

rule constantSetContainedInPatternAndRewrite {
	a:A;
	
	if { "yeah" in a.constNiceSet || a.val != 999 && "bar" in a.constNiceSet; }
	
	modify {
		eval {
			a.val = ((13 in a.constSpiceSet) ? 1 : 0) + ((42 in a.constSpiceSet) ? 2 : 0);
		}
	}
}

rule setEqualityContainment {
	a:A; b:A;
	
	if { a.niceSet == b.niceSet; }
	if { a.niceSet != b.niceSet; }
	if { a.niceSet < b.niceSet; }
	if { a.niceSet <= b.niceSet; }
	if { a.niceSet > b.niceSet; }
	if { a.niceSet >= b.niceSet; }
	
	modify {
		eval {
			a.val = (a.niceSet == b.niceSet) ? 1 : 0;
			b.val = (a.niceSet != b.niceSet) ? 1 : 0;
			a.val = (a.niceSet < b.niceSet) ? 1 : 0;
			b.val = (a.niceSet <= b.niceSet) ? 1 : 0;
			a.val = (a.niceSet > b.niceSet) ? 1 : 0;
			b.val = (a.niceSet >= b.niceSet) ? 1 : 0;
		}
	}
}

rule setEqualityContainment2 {	
	a:A; b:A;
	
	if { {1,2} == {1,2,a.val}; }
	if { {1,2} != {1,2,a.val}; }
	if { {1,2} < {1,2,a.val}; }
	if { {1,2} <= {1,2,a.val}; }
	if { {1,2} > {1,2,a.val}; }
	if { {1,2} >= {1,2,a.val}; }
	
	modify {
		eval {
			a.val = ({1,2} == {1,2,a.val}) ? 1 : 0;
			b.val = ({1,2} != {1,2,a.val}) ? 1 : 0;
			a.val = ({1,2} < {1,2,a.val}) ? 1 : 0;
			b.val = ({1,2} <= {1,2,a.val}) ? 1 : 0;
			a.val = ({1,2} > {1,2,a.val}) ? 1 : 0;
			b.val = ({1,2} >= {1,2,a.val}) ? 1 : 0;
		}
	}
}
